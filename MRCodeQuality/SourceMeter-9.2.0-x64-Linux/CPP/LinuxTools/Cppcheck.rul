<?xml version="1.0" encoding="UTF-8"?>
<Rul xmlns = "http://www.frontendart.com" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation = "http://www.frontendart.com rul.xsd">
  <ToolDescription>
    <Configuration name = "Default">
      <ToolDescriptionItem name = "ID">Cppcheck</ToolDescriptionItem>
    </Configuration>
  </ToolDescription>
  <Configurations/>
  <Views/>
  <Edges/>
  <Metric id = "API Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>API Rules</DisplayName>
        <Description>The API Ruleset contains rules that find built in function usages that are wrong.</Description>
        <HelpText>The API Ruleset contains rules that find built in function usages that are wrong.</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Boost Library Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Boost Library Rules</DisplayName>
        <Description>The Boost Library Ruleset contains rules for boost usage.</Description>
        <HelpText>The Boost Library Ruleset contains rules for boost usage.</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Buffer Overrun Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Buffer Overrun Rules</DisplayName>
        <Description>The Buffer Overrun Ruleset contains rules that find mistakes about buffers usage and array indices.</Description>
        <HelpText>The Buffer Overrun Ruleset contains rules that find mistakes about buffers usage and array indices.</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_AATI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AssignmentAddressToInteger</OriginalId>
      <GroupMember>Portability Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Assignment Address To Integer</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Assigning a pointer to an integer (int/long/etc) is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit address to 32-bit integer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t).&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ABTF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>assignBoolToFloat</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Assign Bool To Float</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Boolean value assigned to floating point variable.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ABTP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>assignBoolToPointer</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Assign Bool To Pointer</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Boolean value assigned to pointer.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_AF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>accessForwarded</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Access Forwarded</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Access of forwarded variable &apos;v&apos;.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_AIA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>assignmentInAssert</OriginalId>
      <GroupMember>Side Effect Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Assignment In Assert</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Variable &apos;var&apos; is modified insert assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_AID">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>autovarInvalidDeallocation</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Autovar Invalid Deallocation</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The deallocation of an auto-variable results in undefined behaviour. You should only free memory that has been allocated dynamically.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_AIE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>assignIfError</OriginalId>
      <GroupMember>Conditional Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Assign If Error</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Mismatching assignment and comparison, comparison &apos;&apos; is always false.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_AIOOB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>arrayIndexOutOfBounds</OriginalId>
      <GroupMember>Buffer Overrun Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Array Index Out Of Bounds</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Array &apos;array[2]&apos; index array[1][1] out of bounds.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_AIOOBC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>arrayIndexOutOfBoundsCond</OriginalId>
      <GroupMember>Buffer Overrun Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Array Index Out Of Bounds Cond</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Array &apos;x[10]&apos; accessed at index 20, which is out of bounds. Otherwise condition &apos;y==20&apos; is redundant.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_AITA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AssignmentIntegerToAddress</OriginalId>
      <GroupMember>Portability Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Assignment Integer To Address</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Assigning an integer (int/long/etc) to a pointer is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit integer to 32-bit pointer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t).&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_AITC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>arrayIndexThenCheck</OriginalId>
      <GroupMember>Buffer Overrun Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Array Index Then Check</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Defensive programming: The variable &apos;index&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;amp;&amp;amp; i &amp;lt; 10)&apos; to &apos;(i &amp;lt; 10 &amp;amp;&amp;amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_AM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>accessMoved</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Access Moved</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Access of moved variable &apos;v&apos;.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_AOOVP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>arithOperationsOnVoidPointer</OriginalId>
      <GroupMember>Sizeof Operator Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Arithmetic Operations On Void Pointer</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;&apos;varname&apos; is of type &apos;vartype&apos;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &apos;void *&apos; is a GNU C extension, which defines the &apos;sizeof(void)&apos; to be 1.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_AOSBLU">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>operatorEqShouldBeLeftUnimplemented</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Assignment Operator Should Be Left Unimplemented</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;&apos;operator=&apos; should either return reference to &apos;this&apos; instance or be declared private and left unimplemented.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_AS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>argumentSize</OriginalId>
      <GroupMember>Buffer Overrun Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Argument Size</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The array &apos;array&apos; is too small, the function &apos;function&apos; expects a bigger one.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_AV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>autoVariables</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Auto Variables</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Dangerous assignment - the function parameter is assigned the address of a local auto-variable. Local auto-variables are reserved from the stack which is freed when the function ends. So the pointer to a local variable is invalid after the function ends.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_AVAGP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>autoVariablesAssignGlobalPointer</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Auto Variables Assign Global Pointer</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Address of local array array is assigned to global pointer pointer and not reassigned before array goes out of scope.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_AWSE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>assertWithSideEffect</OriginalId>
      <GroupMember>Side Effect Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Assert With Side Effect</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Non-pure function: &apos;function&apos; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_BAOOB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>bufferAccessOutOfBounds</OriginalId>
      <GroupMember>Buffer Overrun Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Buffer Access Out Of Bounds</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Buffer is accessed out of bounds: buffer&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_BBC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>badBitmaskCheck</OriginalId>
      <GroupMember>Conditional Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Bitmask Check</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Result of operator &apos;|&apos; is always true if one operand is non-zero. Did you intend to use &apos;&amp;amp;&apos;?&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_BFE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>boostForeachError</OriginalId>
      <GroupMember>Boost Library Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Boost Foreach Error</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;BOOST_FOREACH caches the end() iterator. It&apos;s undefined behavior if you modify the container inside.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_BNZT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>bufferNotZeroTerminated</OriginalId>
      <GroupMember>Buffer Overrun Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Buffer Not Zero Terminated</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The buffer &apos;buffer&apos; is not null-terminated after the call to strncpy(). This will cause bugs later in the code if the code assumes the buffer is null-terminated.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_BOB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>bitwiseOnBoolean</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bitwise On Boolean</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Boolean variable &apos;varname&apos; is used in bitwise operation. Did you mean &apos;&amp;amp;&amp;amp;&apos;?&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CAF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>knownConditionTrueFalse</OriginalId>
      <GroupMember>Conditional Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Condition is Always False</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Condition &apos;x&apos; is always false&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CAI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>unknownSignCharArrayIndex</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Character Array Index</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;&apos;char&apos; type used as array index. Values greater that 127 will be treated depending on whether &apos;char&apos; is signed or unsigned on target platform.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CATIAR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>CastAddressToIntegerAtReturn</OriginalId>
      <GroupMember>Portability Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Cast Address To Integer At Return</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Returning an address value in a function with integer (int/long/etc) return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit address down to 32-bit integer. The safe way is to always return an integer.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CBEWI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>compareBoolExpressionWithInt</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Compare Bool Expression With Int</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Comparison of a boolean expression with an integer other than 0 or 1.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CBO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>charBitOp</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Char Bit Op</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;When using &apos;char&apos; variables in bit operations, sign extension can generate unexpected results.&lt;/p&gt;&#x0A;&lt;p&gt;For example:&lt;/p&gt;&#x0A;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode cpp&quot;&gt;&lt;code class=&quot;sourceCode cpp&quot;&gt;&lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt; c = &lt;span class=&quot;bn&quot;&gt;0x80&lt;/span&gt;;&#x0A;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; | c;&#x0A;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (i &amp;amp; &lt;span class=&quot;bn&quot;&gt;0x8000&lt;/span&gt;)&#x0A;    printf(&lt;span class=&quot;st&quot;&gt;&amp;quot;not expected&amp;quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#x0A;&lt;p&gt;The &amp;quot;not expected&amp;quot; will be printed on the screen.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CCAEO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>copyCtorAndEqOperator</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Copy Constructor And Eq Operator</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The class &apos;class&apos; has &apos;operator=&apos; but lack of &apos;copy constructor&apos;.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CCALC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>clarifyCalculation</OriginalId>
      <GroupMember>Readability and Consistency Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Clarify Calculation</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a+b?c:d&apos;&apos; should be written as either &apos;&apos;(a+b)?c:d&apos;&apos; or &apos;&apos;a+(b?c:d)&apos;&apos;.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CCITCAB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>checkCastIntToCharAndBack</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Check Cast Int To Char And Back</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;When saving func_name() return value in char variable there is loss of precision. When func_name() returns EOF this value is truncated. Comparing the char variable with EOF can have unexpected results. For instance a loop &amp;quot;while (EOF != (c = func_name());&amp;quot; loops forever on some compilers/platforms and on other compilers/platforms it will stop when the file contains a matching character.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CCM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>coutCerrMisusage</OriginalId>
      <GroupMember>Input Output Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Cout Cerr Misusage</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Invalid usage of output stream: &apos;&amp;lt;&amp;lt; std::cout&apos;.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CCOND">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>clarifyCondition</OriginalId>
      <GroupMember>Conditional Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Clarify Condition</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Suspicious condition (assignment + comparison); Clarify expression with parentheses.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CCPC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>copyCtorPointerCopying</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Copy Ctor Pointer Copying</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Value of pointer &apos;var&apos;, which points to allocated memory, is copied in copy constructor instead of allocating new memory.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>comparisonError</OriginalId>
      <GroupMember>Conditional Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Comparison Error</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The expression &apos;(X &amp;amp; 0x6) == 0x1&apos; is always false. Check carefully constants and operators used, these errors might be hard to spot sometimes. In case of complex expression it might help to split it to separate expressions.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CEBV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>catchExceptionByValue</OriginalId>
      <GroupMember>Exception Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Catch Exception By Value</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CFIATOF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>comparisonFunctionIsAlwaysTrueOrFalse</OriginalId>
      <GroupMember>Conditional Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Comparison Function Is Always True Or False</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The function isless is designed to compare two variables. Calling this function with one variable (varName) for both parameters leads to a statement which is always false.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CIODC1">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>iteratorsCmp1</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Comparing Iterators Of Different Containers1</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Comparison of iterators from containers &apos;container1&apos; and &apos;container2&apos;.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CIODC2">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>iteratorsCmp2</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Comparing Iterators Of Different Containers2</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Comparison of iterators from containers &apos;container&apos; that are defined in different scopes.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CITAAR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>CastIntegerToAddressAtReturn</OriginalId>
      <GroupMember>Portability Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Cast Integer To Address At Return</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Returning an integer (int/long/etc) in a function with pointer return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit integer down to 32-bit pointer. The safe way is to always return a pointer.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CLWCPC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>charLiteralWithCharPtrCompare</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Char Literal With Char Ptr Compare</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Char literal compared with pointer &apos;foo&apos;. Did you intend to dereference it?&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CNC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>ConfigurationNotChecked</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Configuration Not Checked</DisplayName>
        <Description></Description>
        <HelpText>Skipping configuration &apos;X&apos; since the value of &apos;X&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Info</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_COBWBE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>comparisonOfBoolWithBoolError</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Comparison Of Bool With Bool Error</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The variable &apos;var_name&apos; is of type &apos;bool&apos; and comparing &apos;bool&apos; value using relational (&amp;lt;, &amp;gt;, &amp;lt;= or &amp;gt;=) operator could cause unexpected results.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_COBWIC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>comparisonOfBoolWithInvalidComparator</OriginalId>
      <GroupMember>Conditional Rules</GroupMember>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Comparison Of Bool With Invalid Comparator</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The result of the expression &apos;expression&apos; is of type &apos;bool&apos;. Comparing &apos;bool&apos; value using relational (&amp;lt;, &amp;gt;, &amp;lt;= or &amp;gt;=) operator could cause unexpected results.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_COFRBE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>comparisonOfFuncReturningBoolError</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Comparison Of Func Returning Bool Error</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The return type of function &apos;func_name&apos; is &apos;bool&apos; and result is of type &apos;bool&apos;. Comparing &apos;bool&apos; value using relational (&amp;lt;, &amp;gt;, &amp;lt;= or &amp;gt;=) operator could cause unexpected results.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_COOB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>containerOutOfBounds</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Container Out Of Bounds</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Out of bounds access of item in container &apos;var&apos;&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_COTFRBE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>comparisonOfTwoFuncsReturningBoolError</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Comparison Of Two Funcs Returning Bool Error</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The return type of function &apos;func_name1&apos; and function &apos;func_name2&apos; is &apos;bool&apos; and result is of type &apos;bool&apos;. Comparing &apos;bool&apos; value using relational (&amp;lt;, &amp;gt;, &amp;lt;= or &amp;gt;=) operator could cause unexpected results.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>constStatement</OriginalId>
      <GroupMember>Suspicious Construct Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Const Statement</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Redundant code: Found a statement that begins with type constant.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CSC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>cstyleCast</OriginalId>
      <GroupMember>Readability and Consistency Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Cstyle Cast</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected.&lt;/p&gt;&#x0A;&lt;p&gt;See also: &lt;a href=&quot;https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts&quot; class=&quot;uri&quot;&gt;https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts&lt;/a&gt;.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CSR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>commaSeparatedReturn</OriginalId>
      <GroupMember>Readability and Consistency Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Comma Separated Return</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Comma is used in return statement. When comma is used in a return statement it can easily be misread as a semicolon.&lt;/p&gt;&#x0A;&lt;p&gt;For example in the code below the value of &apos;b&apos; is returned if the condition is true, but it is easy to think that &apos;a+1&apos; is returned:&lt;/p&gt;&#x0A;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode cpp&quot;&gt;&lt;code class=&quot;sourceCode cpp&quot;&gt;    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (x)&#x0A;        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; a + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&#x0A;    b++;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#x0A;&lt;p&gt;However it can be useful to use comma in macros. Cppcheck does not warn when such a macro is then used in a return statement, it is less likely such code is misunderstood.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_CSTAT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>clarifyStatement</OriginalId>
      <GroupMember>Readability and Consistency Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Clarify Statement</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;A statement like &apos;*A++;&apos; might not do what you intended. Postfix &apos;operator++&apos; is executed before &apos;operator*&apos;. Thus, the dereference is meaningless. Did you intend to write &apos;(*A)++;&apos;?&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_DAE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>duplicateAssignExpression</OriginalId>
      <GroupMember>Suspicious Construct Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Duplicate Assign Expression</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Finding variables &apos;x&apos; and &apos;x&apos; that are assigned the same expression is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_DAR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>deallocret</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Deallocret</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Returning/dereferencing &apos;p&apos; after it is deallocated / released&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_DBRANCH">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>duplicateBranch</OriginalId>
      <GroupMember>Suspicious Construct Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Duplicate Branch</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Finding the same code in an &apos;if&apos; and related &apos;else&apos; branch is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_DBREAK">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>duplicateBreak</OriginalId>
      <GroupMember>Unreachable Code Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Duplicate Break</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_DD">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>deallocDealloc</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Dealloc Dealloc</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Deallocating a deallocated pointer: varname&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_DET">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>duplicateExpressionTernary</OriginalId>
      <GroupMember>Suspicious Construct Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Duplicate Expression Ternary</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Finding the same expression in both branches of ternary operator is suspicious as the same code is executed regardless of the condition.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_DEXPR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>duplicateExpression</OriginalId>
      <GroupMember>Suspicious Construct Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Duplicate Expression</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_DF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>doubleFree</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Double Free</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Memory pointed to by &apos;varname&apos; is freed twice.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_DII">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>derefInvalidIterator</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Deref Invalid Iterator</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Possible dereference of an invalid iterator: i. Make sure to check that the iterator is valid before dereferencing it - not after.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_DIM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>duplInheritedMember</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Dupl Inherited Member</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The class &apos;class&apos; defines member variable with name &apos;variable&apos; also defined in its parent class &apos;class&apos;.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_DL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>danglingLifetime</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Dangling Lifetime</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Non-local variable &apos;x&apos; will use object.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_DP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>deadpointer</OriginalId>
      <GroupMember>Initialization Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Deadpointer</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Dead pointer usage. Pointer &apos;pointer&apos; is dead if it has been assigned &apos;&amp;amp;x&apos; at line 0.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_DSO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>divideSizeof</OriginalId>
      <GroupMember>Sizeof Operator Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Divide Sizeof</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, not the size of the memory area it points to.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_DU">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>deallocuse</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Deallocuse</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Dereferencing &apos;varname&apos; after it is deallocated / released&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_DUOS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>uninitstring</OriginalId>
      <GroupMember>Initialization Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Dangerous Use Of Strncpy</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Dangerous usage of &apos;varname&apos; (strncpy doesn&apos;t always null-terminate it).&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_DVT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>duplicateValueTernary</OriginalId>
      <GroupMember>Suspicious Construct Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Duplicate Value Ternary</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ED">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>eraseDereference</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Erase Dereference</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The iterator &apos;iter&apos; is invalid before being assigned. Dereferencing or comparing it with another iterator is invalid operation.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_EDT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>exceptDeallocThrow</OriginalId>
      <GroupMember>Exception Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Except Dealloc Throw</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Exception thrown in invalid state, &apos;p&apos; points at deallocated memory.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ERC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>exceptRethrowCopy</OriginalId>
      <GroupMember>Exception Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Except Rethrow Copy</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Rethrowing an exception with &apos;throw varname;&apos; creates an unnecessary copy of &apos;varname&apos;. To rethrow the caught exception without unnecessary copying or slicing, use a bare &apos;throw;&apos;.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ETID">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>exceptThrowInDestructor</OriginalId>
      <GroupMember>Exception Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Except Throw In Destructor</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The class Class is not safe because its destructor throws an exception. If Class is used and an exception is thrown that is caught in an outer scope the program will terminate.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_FAND">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>funcArgNamesDifferent</OriginalId>
      <GroupMember>Readability and Consistency Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Function Argument Names Different</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Function &apos;function&apos; argument 2 names different: declaration &apos;A&apos; definition &apos;B&apos;.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_FAOD">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>funcArgOrderDifferent</OriginalId>
      <GroupMember>Readability and Consistency Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Function Argument Order Different</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Function &apos;function&apos; argument order different: declaration &apos;&apos; definition &apos;&apos;&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_FC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>functionConst</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Function Const</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The member function &apos;class::function&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_FCO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>floatConversionOverflow</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Float Conversion Overflow</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Undefined behaviour: float (1e+100) to integer conversion overflow.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_FOIS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>fflushOnInputStream</OriginalId>
      <GroupMember>Input Output Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Fflush On Input Stream</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;fflush() called on input stream &apos;stdin&apos; may result in undefined behaviour on non-linux systems.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_FS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>functionStatic</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Function Static</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The member function &apos;class::function&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IAF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>incompleteArrayFill</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Incomplete Array Fill</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The array &apos;buffer&apos; is filled incompletely. The function &apos;memset()&apos; needs the size given in bytes, but an element of the given array is larger than one byte. Did you forget to multiply the size with &apos;sizeof(*buffer)&apos;?&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>incrementboolean</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Increment Boolean</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The operand of a postfix increment operator may be of type bool but it is deprecated by C++ Standard (Annex D-1) and the operand is always set to true. You should assign it the value &apos;true&apos; instead.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ICAEE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>identicalConditionAfterEarlyExit</OriginalId>
      <GroupMember>Conditional Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Identical Condition After Early Exit</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Identical condition &apos;x&apos;, second condition is always false&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ICBE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>incorrectCharBooleanError</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Incorrect Char Boolean Error</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Conversion of char literal &apos;x&apos; to bool always evaluates to true.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ICLA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>insecureCmdLineArgs</OriginalId>
      <GroupMember>Buffer Overrun Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Insecure Cmd Line Arguments</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Buffer overrun possible for long command line arguments.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidFree</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Free</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Invalid memory address freed.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IFA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidFunctionArg</OriginalId>
      <GroupMember>API Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Function Arguments</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Invalid func_name() argument nr 1. The value is 0 or 1 (boolean) but the valid values are &apos;1:4&apos;.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IFAB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidFunctionArgBool</OriginalId>
      <GroupMember>API Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Function Argument Boolean</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Invalid func_name() argument nr 1. A non-boolean value is required.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IFAS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidFunctionArgStr</OriginalId>
      <GroupMember>API Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Function Argument String</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Invalid func_name() argument nr 1. A nul-terminated string is required.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IIC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>identicalInnerCondition</OriginalId>
      <GroupMember>Conditional Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Identical Inner Condition</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Identical inner &apos;if&apos; condition is always true (outer condition is &apos;x&apos; and inner condition is &apos;x&apos;).&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IIT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidIterator1</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Iterator1</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Invalid iterator: iterator&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IIT2">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidIterator2</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Iterator2</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;After push_back|push_front|insert(), the iterator &apos;iterator&apos; may be invalid.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>initializerList</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Initializer List</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Member variable &apos;class::variable&apos; is in the wrong place in the initializer list. Members are initialized in the order they are declared, not in the order they are in the initializer list. Keeping the initializer list in the same order that the members were declared prevents order dependent initialization errors.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ILME">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidLengthModifierError</OriginalId>
      <GroupMember>API Rules</GroupMember>
      <GroupMember>Input Output Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Length Modifier Error</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;&apos;I&apos; in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ILO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>incorrectLogicOperator</OriginalId>
      <GroupMember>Conditional Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Incorrect Logic Operator</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Logical disjunction always evaluates to true: foo &amp;gt; 3 &amp;amp;&amp;amp; foo &amp;lt; 4. Are these conditions necessary? Did you intend to use &amp;amp;&amp;amp; instead? Are the numbers correct? Are you comparing the correct variables?&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ILT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidLifetime</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Lifetime</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Using object that is out of scope.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>integerOverflow</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Integer Overflow</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Signed integer overflow for expression &apos;&apos;.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IOWP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>IOWithoutPositioning</OriginalId>
      <GroupMember>Input Output Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>IO Without Positioning</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidPointer</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Pointer</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Invalid pointer &apos;pointer&apos; after push_back().&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IPATF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidPrintfArgType_float</OriginalId>
      <GroupMember>Input Output Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Printf Arg Type_float</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;%f in format string (no. 1) requires &apos;double&apos; but the argument type is Unknown.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IPATN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidPrintfArgType_n</OriginalId>
      <GroupMember>Input Output Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Printf Arg Type_n</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;%n in format string (no. 1) requires &apos;int *&apos; but the argument type is Unknown.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IPATP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidPrintfArgType_p</OriginalId>
      <GroupMember>Input Output Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Printf Arg Type_p</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;%p in format string (no. 1) requires an address but the argument type is Unknown.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IPATS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidPrintfArgType_s</OriginalId>
      <GroupMember>Input Output Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Printf Arg Type_s</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;%s in format string (no. 1) requires &apos;char *&apos; but the argument type is Unknown.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IPATSI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidPrintfArgType_sint</OriginalId>
      <GroupMember>Input Output Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Printf Arg Type_sint</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;%i in format string (no. 1) requires &apos;int&apos; but the argument type is Unknown.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IPATUI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidPrintfArgType_uint</OriginalId>
      <GroupMember>Input Output Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Printf Arg Type_uint</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;%u in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is Unknown.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IPC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidPointerCast</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Pointer Cast</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Casting between float* and double* which have an incompatible binary data representation.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IRV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ignoredReturnValue</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Ignored Return Value</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Return value of function malloc() is not used.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_IS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidscanf</OriginalId>
      <GroupMember>Input Output Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Scanf</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;scanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.&lt;/p&gt;&#x0A;&lt;p&gt;Sample program that can crash:&lt;/p&gt;&#x0A;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode cpp&quot;&gt;&lt;code class=&quot;sourceCode cpp&quot;&gt;&lt;span class=&quot;pp&quot;&gt;#include &lt;/span&gt;&lt;span class=&quot;im&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&#x0A;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; main()&#x0A;{&#x0A;  &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt; c[&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;];&#x0A;  scanf(&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;, c);&#x0A;  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#x0A;&lt;p&gt;Typing in 5 or more characters may make the program crash. The correct usage here is &apos;scanf(&amp;quot;%4s&amp;quot;, c);&apos;, as the maximum field width does not include the terminating null byte.&lt;/p&gt;&#x0A;&lt;p&gt;Source: &lt;a href=&quot;http://linux.die.net/man/3/scanf&quot; class=&quot;uri&quot;&gt;http://linux.die.net/man/3/scanf&lt;/a&gt;&lt;/p&gt;&#x0A;&lt;p&gt;Source: &lt;a href=&quot;http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c&quot; class=&quot;uri&quot;&gt;http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c&lt;/a&gt;&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ISATF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidScanfArgType_float</OriginalId>
      <GroupMember>Input Output Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Scanf Arg Type_float</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;%f in format string (no. 1) requires &apos;float *&apos; but the argument type is Unknown.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ISATI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidScanfArgType_int</OriginalId>
      <GroupMember>Input Output Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Scanf Arg Type_int</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;%d in format string (no. 1) requires &apos;int *&apos; but the argument type is Unknown.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ISATS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidScanfArgType_s</OriginalId>
      <GroupMember>Input Output Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Scanf Arg Type_s</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;%s in format string (no. 1) requires a &apos;char *&apos; but the argument type is Unknown.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ISBE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>incorrectStringBooleanError</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Incorrect String Boolean Error</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Conversion of string literal &amp;quot;Hello World&amp;quot; to bool always evaluates to true.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ISC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>incorrectStringCompare</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Incorrect String Compare</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;String literal &amp;quot;Hello World&amp;quot; doesn&apos;t match length argument for substr().&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ISFW">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidScanfFormatWidth</OriginalId>
      <GroupMember>Input Output Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Scanf Format Width</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Width 5 given in format string (no. 10) is larger than destination buffer &apos;[0]&apos;, use %-1s to prevent overflowing it.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ITFO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>invalidTestForOverflow</OriginalId>
      <GroupMember>Conditional Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Test For Overflow</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Invalid test for overflow &apos;x + u &amp;lt; x&apos;. Condition is always false unless there is overflow, and overflow is undefined behaviour.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_LNVFC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>leakNoVarFunctionCall</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Leak No Var Function Call</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Allocation with funcName, funcName doesn&apos;t release it.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_LRVNU">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>leakReturnValNotUsed</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Leak Return Val Not Used</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Return value of allocation function &apos;funcName&apos; is not stored.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_MAD">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>mismatchAllocDealloc</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Mismatch Alloc Dealloc</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Mismatching allocation and deallocation: varname&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_MATF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>moduloAlwaysTrueFalse</OriginalId>
      <GroupMember>Conditional Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Modulo Always True False</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Comparison of modulo result is predetermined, because it is always less than 1.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_MBA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>mismatchingBitAnd</OriginalId>
      <GroupMember>Conditional Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Mismatching Bit And</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Mismatching bitmasks. Result is always 0 (X = Y &amp;amp; 0xf0; Z = X &amp;amp; 0x1; =&amp;gt; Z=0).&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_MC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>memsetClass</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Memset Class</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Using &apos;memfunc&apos; on class that contains a classname is unsafe, because constructor, destructor and copy operator calls are omitted. These are necessary for this non-POD type to ensure that a valid object is created.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_MCE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>mismatchingContainerExpression</OriginalId>
      <GroupMember>Suspicious Construct Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Mismatching Container Expression</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Iterators to containers from different expressions &apos;v1&apos; and &apos;v2&apos; are used together.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_MCF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>memsetClassFloat</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Memset Class Float</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Using memset() on class which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined.&lt;/p&gt;&#x0A;&lt;p&gt;Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_MCOND">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>multiCondition</OriginalId>
      <GroupMember>Conditional Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Multi Condition</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Expression is always false because &apos;else if&apos; condition matches previous condition at line 1.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_MCR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>memsetClassReference</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Memset Class Reference</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Using &apos;memfunc&apos; on class that contains a reference.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_MF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>memsetFloat</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Memset Float</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The 2nd memset() argument &apos;varname&apos; is a float, its representation is implementation defined. memset() is used to set each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_MI">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>missingInclude</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Missing Include</DisplayName>
        <Description></Description>
        <HelpText>Include file: &quot;&quot; not found.</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Info</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ML">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>memleak</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Memleak</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Memory leak: varname&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_MMC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>mismatchingContainers</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Mismatching Containers</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Iterators of different containers are used together.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_MO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>missingOverride</OriginalId>
      <GroupMember>Readability and Consistency Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Missing Override</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The function &apos;&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_MOCE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>mallocOnClassError</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Malloc On Class Error</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Memory for class instance allocated with malloc(), but class a std::string. This is unsafe, since no constructor is called and class members remain uninitialized. Consider using &apos;new&apos; instead.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_MOCW">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>mallocOnClassWarning</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Malloc On Class Warning</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Memory for class instance allocated with malloc(), but class provides constructors. This is unsafe, since no constructor is called and class members remain uninitialized. Consider using &apos;new&apos; instead.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_MOR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>memleakOnRealloc</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Memleak On Realloc</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Common realloc mistake: &apos;varname&apos; nulled but not freed upon failure&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_MRFAO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>operatorEqMissingReturnStatement</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Missing Return From Assignement Operator</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;No &apos;return&apos; statement in non-void function causes undefined behavior.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_MS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>mismatchSize</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Mismatch Size</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The allocated size sz is not a multiple of the underlying type&apos;s size.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_MSI">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>missingIncludeSystem</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Missing System Include</DisplayName>
        <Description></Description>
        <HelpText>Include file: &lt;&gt; not found. Please note: Cppcheck does not need standard library headers to get proper results.</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Info</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_MSO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>multiplySizeof</OriginalId>
      <GroupMember>Sizeof Operator Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Multiply Sizeof</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Multiplying sizeof() with sizeof() indicates a logic error.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_MVOOR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>memsetValueOutOfRange</OriginalId>
      <GroupMember>API Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Memset Value Out Of Range</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The 2nd memset() argument &apos;varname&apos; doesn&apos;t fit into an &apos;unsigned char&apos;. The 2nd parameter is passed as an &apos;int&apos;, but the function fills the block of memory using the &apos;unsigned char&apos; conversion of this value.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_MZB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>memsetZeroBytes</OriginalId>
      <GroupMember>API Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Memset Zero Bytes</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;memset() called to fill 0 bytes. The second and third arguments might be inverted. The function memset ( void * ptr, int value, size_t num ) sets the first num bytes of the block of memory pointed by ptr to the specified value.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_NAO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>noOperatorEq</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>No Assignment Operator</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Class &apos;class&apos; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s).&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_NAS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>negativeArraySize</OriginalId>
      <GroupMember>Buffer Overrun Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Negative Array Size</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Declaration of array &apos;&apos; with negative size is undefined behaviour&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_NC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>noConstructor</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>No Constructor</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The class &apos;classname&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_NCC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>noCopyConstructor</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>No Copy Constructor</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Class &apos;class&apos; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s).&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ND">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>noDestructor</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>No Destructor</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Class &apos;class&apos; does not have a destructor which is recommended since it has dynamic memory/resource allocation(s).&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_NEC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>noExplicitConstructor</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>No Explicit Constructor</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Class &apos;classname&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_NI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>negativeIndex</OriginalId>
      <GroupMember>Buffer Overrun Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Negative Index</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Array index -1 is out of bounds.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_NIAE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>nanInArithmeticExpression</OriginalId>
      <GroupMember>Suspicious Construct Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Nan In Arithmetic Expression</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Using NaN/Inf in a computation. Although nothing bad really happens, it is suspicious.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_NMAS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>negativeMemoryAllocationSize</OriginalId>
      <GroupMember>Buffer Overrun Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Negative Memory Allocation Size</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Memory allocation size is negative.Negative allocation size has no specified behaviour.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_NP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>nullPointer</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Null Pointer</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Null pointer dereference&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_NPDWDA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>nullPointerDefaultArg</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>NULL Pointer Dereference With Default Argument</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Possible null pointer dereference if the default parameter value is used: pointer&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_OE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>operatorEq</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Operator Eq</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The class::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;class &amp;amp;class::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &amp;quot;Effective C++&amp;quot; by Scott Meyers.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_OERRT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>operatorEqRetRefThis</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Operator Eq Ret Ref This</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;&apos;operator=&apos; should return reference to &apos;this&apos; instance.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_OETS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>operatorEqToSelf</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Operator Eq To Self</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;&apos;operator=&apos; should check for assignment to self to ensure that each block of dynamically allocated memory is owned and managed by only one instance of the class.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_OEVE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>operatorEqVarError</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Operator Eq Var Error</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Member variable &apos;classname::&apos; is not assigned a value in &apos;classname::operator=&apos;.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_OIC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>oppositeInnerCondition</OriginalId>
      <GroupMember>Conditional Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Opposite Inner Condition</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Opposite inner &apos;if&apos; condition leads to a dead code block (outer condition is &apos;x&apos; and inner condition is &apos;!x&apos;).&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_OOB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>outOfBounds</OriginalId>
      <GroupMember>Buffer Overrun Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Out Of Bounds</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Index is out of bounds: Supplied size 2 is larger than actual size 1.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_OPE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>oppositeExpression</OriginalId>
      <GroupMember>Suspicious Construct Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Opposite Expression</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Finding the opposite expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_OS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>overlappingStrcmp</OriginalId>
      <GroupMember>Suspicious Construct Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Overlapping Strcmp</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The expression &apos;strcmp(x,&amp;quot;def&amp;quot;) != 0&apos; is suspicious. It overlaps &apos;strcmp(x,&amp;quot;abc&amp;quot;) == 0&apos;.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_PAB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>pointerArithBool</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Pointer Arith Bool</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Converting pointer arithmetic result to bool. The boolean result is always true unless there is pointer arithmetic overflow, and overflow is undefined behaviour. Probably a dereference is forgotten.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_PAE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>publicAllocationError</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Public Allocation Error</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Possible leak in public function. The pointer &apos;varname&apos; is not deallocated before it is allocated.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_PANC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>pointerAdditionResultNotNull</OriginalId>
      <GroupMember>Conditional Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Pointer Addition Null Check</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Comparison is wrong. Result of &apos;ptr+1&apos; can&apos;t be 0 unless there is pointer overflow, and pointer overflow is undefined behaviour.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_PAWN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>nullPointerArithmetic</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Pointer Arithmetic With NULL</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Pointer arithmetic with NULL pointer.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_PBAOOB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>possibleBufferAccessOutOfBounds</OriginalId>
      <GroupMember>Buffer Overrun Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Possible Buffer Access Out Of Bounds</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Possible buffer overflow if strlen(source) is larger than or equal to sizeof(destination). The source buffer is larger than the destination buffer so there is the potential for overflowing the destination buffer.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_PBV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>passedByValue</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Passed By Value</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Parameter &apos;parametername&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_PC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>purgedConfiguration</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Purged Configuration</DisplayName>
        <Description></Description>
        <HelpText>The configuration &apos;&apos; was not checked because its code equals another one.</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Info</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_PED">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>preprocessorErrorDirective</OriginalId>
      <GroupMember>Preprocessor Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Preprocessor Error Directive</DisplayName>
        <Description></Description>
        <HelpText>#error message</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_PLTZ">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>pointerLessThanZero</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Pointer Less Than Zero</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;A pointer can not be negative so it is either pointless or an error to check if it is.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_PO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>postfixOperator</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Postfix Operator</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_POOB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>pointerOutOfBounds</OriginalId>
      <GroupMember>Buffer Overrun Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Pointer Out Of Bounds</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Undefined behaviour, pointer arithmetic &apos;&apos; is out of bounds. From chapter 6.5.6 in the C specification: &amp;quot;When an expression that has integer type is added to or subtracted from a pointer, ..&amp;quot; and then &amp;quot;If both the pointer operand and the result point to elements of the same array object, or one past the last element of the array object, the evaluation shall not produce an overflow; otherwise, the behavior is undefined.&amp;quot;&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_PP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>pointerPositive</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Pointer Positive</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;A pointer can not be negative so it is either pointless or an error to check if it is not.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_PS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>pointerSize</OriginalId>
      <GroupMember>Sizeof Operator Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Pointer Size</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Size of pointer &apos;varname&apos; used instead of size of its data. This is likely to lead to a buffer overflow. You probably intend to write &apos;sizeof(*varname)&apos;.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_PVC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>pureVirtualCall</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Pure Virtual Call</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Call of pure virtual function &apos;f&apos; in constructor. The call will fail during runtime.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_RA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>redundantAssignment</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Redundant Assignment</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Variable &apos;var&apos; is reassigned a value before the old one has been used.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_RAID">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>raceAfterInterlockedDecrement</OriginalId>
      <GroupMember>API Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Race After Interlocked Decrement</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_RAIS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>redundantAssignInSwitch</OriginalId>
      <GroupMember>Suspicious Construct Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Redundant Assign In Switch</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Variable &apos;var&apos; is reassigned a value before the old one has been used. &apos;break;&apos; missing?&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_RAOAV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>returnAddressOfAutoVariable</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Return Address Of Auto Variable</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Address of an auto-variable returned.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_RAOFP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>returnAddressOfFunctionParameter</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Return Address Of Function Parameter</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Address of the function parameter &apos;parameter&apos; becomes invalid after the function exits because function parameters are stored on the stack which is freed when the function exits. Thus the returned value is invalid.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_RBOIS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>redundantBitwiseOperationInSwitch</OriginalId>
      <GroupMember>Suspicious Construct Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Redundant Bitwise Operation In Switch</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Redundant bitwise operation on &apos;varname&apos; in &apos;switch&apos; statement. &apos;break;&apos; missing?&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_RCIS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>redundantCopyInSwitch</OriginalId>
      <GroupMember>Suspicious Construct Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Redundant Copy In Switch</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Buffer &apos;var&apos; is being written before its old content has been used. &apos;break;&apos; missing?&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_RCLC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>redundantCopyLocalConst</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Redundant Copy Local Const</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The const variable &apos;varname&apos; is assigned a copy of the data. You can avoid the unnecessary data copying by converting &apos;varname&apos; to const reference.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_RCOND">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>redundantCondition</OriginalId>
      <GroupMember>Conditional Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Redundant Condition</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Redundant condition: If x &amp;gt; 11 the condition x &amp;gt; 10 is always true.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_RCPY">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>redundantCopy</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Redundant Copy</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Buffer &apos;var&apos; is being written before its old content has been used.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_RDL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>returnDanglingLifetime</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Return Dangling Lifetime</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Returning object that will be invalid when returning.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_REC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>reademptycontainer</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Read Empty Container</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Reading from empty STL container &apos;var&apos;&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_RF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>returnReference</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Return Reference</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Reference to auto variable returned.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_RIR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>redundantIfRemove</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Redundant If Remove</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Redundant checking of STL container element existence before removing it. It is safe to call the remove method on a non-existing element.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_RL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>resourceLeak</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Resource Leak</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Resource leak: varname&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_RLV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>returnLocalVariable</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Return Local Variable</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Pointer to local array variable returned.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_RNBIBF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>returnNonBoolInBooleanFunction</OriginalId>
      <GroupMember>Suspicious Construct Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Return Address Of Auto Variable</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Non-boolean value returned from function returning bool&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_RNPC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>nullPointerRedundantCheck</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Redundant NULL Pointer Check</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Either the condition is redundant or there is possible null pointer dereference: pointer.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_RPO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>redundantPointerOp</OriginalId>
      <GroupMember>Suspicious Construct Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Redundant Pointer Operation</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Redundant pointer operation on &apos;varname&apos; - it&apos;s already a pointer.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_RTF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>returnTempReference</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Return Temp Reference</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Reference to temporary returned.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_RWOF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>readWriteOnlyFile</OriginalId>
      <GroupMember>Input Output Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Read Write Only File</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Read operation on a file that was opened only for writing.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>selfAssignment</OriginalId>
      <GroupMember>Suspicious Construct Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Self Assignment</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Redundant assignment of &apos;varname&apos; to itself.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SAAC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>sizeArgumentAsChar</OriginalId>
      <GroupMember>Buffer Overrun Rules</GroupMember>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Size Argument As Char</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The size argument is given as a char constant.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SBN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>shiftNegative</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Shift By Negative</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Shifting by a negative value is undefined behaviour&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>signConversion</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Sign Conversion</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Suspicious code: sign conversion of var in calculation, even though var can have a negative value&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SCAI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>signedCharArrayIndex</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Signed Char Array Index</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Signed &apos;char&apos; type used as array index. If the value can be greater than 127 there will be a buffer underflow because of sign extension.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SCP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>stlcstrParam</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Stlcstr Param</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The conversion from const char* as returned by c_str() to std::string creates an unnecessary string copy. Solve that by directly passing the string.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SCR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>stlcstrReturn</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Stlcstr Return</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The conversion from const char* as returned by c_str() to std::string creates an unnecessary string copy. Solve that by directly returning the string.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SCT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>stlcstrthrow</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Stlcstr Throw</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Dangerous usage of c_str(). The string is destroyed after the c_str() call so the thrown pointer is invalid.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SEC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>suspiciousEqualityComparison</OriginalId>
      <GroupMember>Suspicious Construct Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Suspicious Equality Comparison</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Found suspicious equality comparison. Did you intend to assign a value instead?&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>shadowFunction</OriginalId>
      <GroupMember>Readability and Consistency Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Shadow Function</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Local variable f shadows outer function&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>selfInitialization</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Self Initialization</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Member variable &apos;var&apos; is initialized by itself.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SIE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>sameIteratorExpression</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Same Iterator Expression</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Same iterators expression are used for algorithm.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SIWDC1">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>iterators1</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Same Iterator With Different Containers1</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Same iterator is used with different containers &apos;container1&apos; and &apos;container2&apos;.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SIWDC2">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>iterators3</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Same Iterator With Different Containers2</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Same iterator is used with containers &apos;container&apos; that are defined in different scopes.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SLW">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>stringLiteralWrite</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>String Literal Write</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Modifying string literal directly or indirectly is undefined behaviour.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>shiftNegativeLHS</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Shift Negative</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Shifting a negative value is technically undefined behaviour&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SOAF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>seekOnAppendedFile</OriginalId>
      <GroupMember>Input Output Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Seek On Appended File</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Repositioning operation performed on a file opened in append mode has no effect.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SOC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>sizeofCalculation</OriginalId>
      <GroupMember>Sizeof Operator Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Sizeof Calculation</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Found calculation inside sizeof().&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SOD">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>sprintfOverlappingData</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Sprintf Overlapping Data</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The variable &apos;varname&apos; is used both as a parameter and as destination in s[n]printf(). The origin and destination buffers overlap. Quote from glibc (C-library) documentation (&lt;a href=&quot;http://www.gnu.org/software/libc/manual/html_mono/libc.html#Formatted-Output-Functions&quot; class=&quot;uri&quot;&gt;http://www.gnu.org/software/libc/manual/html_mono/libc.html#Formatted-Output-Functions&lt;/a&gt;): &amp;quot;If copying takes place between objects that overlap as a result of a call to sprintf() or snprintf(), the results are undefined.&amp;quot;&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SODMF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>sizeofDivisionMemfunc</OriginalId>
      <GroupMember>Sizeof Operator Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Sizeof Division Memfunc</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Division by result of sizeof(). memset() expects a size in bytes, did you intend to multiply instead?&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SODVP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>sizeofDereferencedVoidPointer</OriginalId>
      <GroupMember>Sizeof Operator Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Sizeof Dereferenced Void Pointer</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;&apos;*varname&apos; is of type &apos;void&apos;, the behaviour of &apos;sizeof(void)&apos; is not covered by the ISO C standard. A value for &apos;sizeof(void)&apos; is defined only as part of a GNU C extension, which defines &apos;sizeof(void)&apos; to be 1.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SOFC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>sizeofFunctionCall</OriginalId>
      <GroupMember>Sizeof Operator Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Sizeof Function Call</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Found function call inside sizeof().&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SOSO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>sizeofsizeof</OriginalId>
      <GroupMember>Sizeof Operator Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Sizeof Sizeof</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Calling sizeof for &apos;sizeof looks like a suspicious code and most likely there should be just one &apos;sizeof&apos;. The current code is equivalent to &apos;sizeof(size_t)&apos;&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SOV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>sizeofVoid</OriginalId>
      <GroupMember>Sizeof Operator Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Sizeof Void</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Behaviour of &apos;sizeof(void)&apos; is not covered by the ISO C standard. A value for &apos;sizeof(void)&apos; is defined only as part of a GNU C extension, which defines &apos;sizeof(void)&apos; to be 1.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SOWNP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>sizeofwithnumericparameter</OriginalId>
      <GroupMember>Sizeof Operator Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Sizeof With Numeric Parameter</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;It is unusual to use a constant value with sizeof. For example, &apos;sizeof(10)&apos; returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 10. &apos;sizeof(&apos;A&apos;)&apos; and &apos;sizeof(char)&apos; can return different results.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SOWSAP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>sizeofwithsilentarraypointer</OriginalId>
      <GroupMember>Sizeof Operator Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Sizeof With Silent Array Pointer</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Using &apos;sizeof&apos; for array given as function argument returns the size of a pointer. It does not return the size of the whole array in bytes as might be expected.&lt;/p&gt;&#x0A;&lt;p&gt;For example, this code:&lt;/p&gt;&#x0A;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode cpp&quot;&gt;&lt;code class=&quot;sourceCode cpp&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; f(&lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt; a[&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;]) {&#x0A;    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;sizeof&lt;/span&gt;(a);&#x0A;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#x0A;&lt;p&gt;returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 100 (the size of the array in bytes).&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SPC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>strPlusChar</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Str Plus Char</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Unusual pointer arithmetic. A value of type &apos;char&apos; is added to a string literal.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>suspiciousSemicolon</OriginalId>
      <GroupMember>Readability and Consistency Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Suspicious Semicolon</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Suspicious use of ; at the end of &apos;&apos; statement.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SSC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>staticStringCompare</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Static String Compare</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The compared strings, &apos;str1&apos; and &apos;str2&apos;, are always unequal. Therefore the comparison is unnecessary and looks suspicious.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_STLB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>stlBoundaries</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Stl Boundaries</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Iterator compared with operator&amp;lt;. This is dangerous since the order of items in the container is not guaranteed. One should use operator!= instead to compare iterators.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_STLC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>stlcstr</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Stlcstr</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Dangerous usage of c_str(). The c_str() return value is only valid until its string is deleted.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_STLIF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>stlIfFind</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Stl If Find</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Suspicious condition. The result of find() is an iterator, but it is not properly checked.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_STLISF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>stlIfStrFind</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Stl If Str Find</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Either inefficient or wrong usage of string::find(). string::compare() will be faster if string::find&apos;s result is compared with 0, because it will not scan the whole string. If your intention is to check that there are no findings in the string, you should compare with std::string::npos.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_STLMC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>StlMissingComparison</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Stl Missing Comparison</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The iterator incrementing is suspicious - it is incremented at line and then at line . The loop might unintentionally skip an element in the container. There is no comparison between these increments to prevent that the iterator is incremented beyond the end.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_STLOOB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>stlOutOfBounds</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Stl Out Of Bounds</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;When i==foo.size(), foo[i] is out of bounds.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_STLS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>stlSize</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Stl Size</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Checking for &apos;list&apos; emptiness might be inefficient. Using list.empty() instead of list.size() can be faster. list.size() can take linear time but list.empty() is guaranteed to take constant time.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_STMB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>shiftTooManyBits</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Shift Too Many Bits</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Shifting 32-bit value by 40 bits is undefined behaviour&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_STMBS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>shiftTooManyBitsSigned</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Shift Too Many Bits Signed</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Shifting signed 32-bit value by 31 bits is undefined behaviour&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_STRCMP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>stringCompare</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>String Compare</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The compared strings, &apos;varname1&apos; and &apos;varname2&apos;, are identical. This could be a logic bug.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_STRCU">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>strncatUsage</OriginalId>
      <GroupMember>API Rules</GroupMember>
      <GroupMember>Buffer Overrun Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Strncat Usage</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;At most, strncat appends the 3rd parameter&apos;s amount of characters and adds a terminating null byte. The safe way to use strncat is to subtract one from the remaining space in the buffer and use it as 3rd parameter.&lt;/p&gt;&#x0A;&lt;p&gt;Source: &lt;a href=&quot;http://www.cplusplus.com/reference/cstring/strncat/&quot; class=&quot;uri&quot;&gt;http://www.cplusplus.com/reference/cstring/strncat/&lt;/a&gt;&lt;/p&gt;&#x0A;&lt;p&gt;Source: &lt;a href=&quot;http://www.opensource.apple.com/source/Libc/Libc-167/gen.subproj/i386.subproj/strncat.c&quot; class=&quot;uri&quot;&gt;http://www.opensource.apple.com/source/Libc/Libc-167/gen.subproj/i386.subproj/strncat.c&lt;/a&gt;&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SUSPC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>suspiciousCase</OriginalId>
      <GroupMember>Suspicious Construct Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Suspicious Case</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Using an operator like &apos;||&apos; in a case label is suspicious. Did you intend to use a bitwise operator, multiple case labels or if/else instead?&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_SV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>shadowVar</OriginalId>
      <GroupMember>Readability and Consistency Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Shadow Variable</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Local variable var shadows outer variable&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_TINF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>throwInNoexceptFunction</OriginalId>
      <GroupMember>Exception Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Throw In Noexcept Function</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Exception thrown in function declared not to throw exceptions.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_TLCA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>truncLongCastAssignment</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Trunc Long Cast Assignment</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;int result is assigned to long variable. If the variable is long to avoid loss of information, then there is loss of information. To avoid loss of information you must cast a calculation operand to long, for example &apos;l = a * b;&apos; =&amp;gt; &apos;l = (long)a * b;&apos;.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_TLCR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>truncLongCastReturn</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Trunc Long Cast Return</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;int result is returned as long value. If the return value is long to avoid loss of information, then there is loss of information. To avoid loss of information you must cast a calculation operand to long, for example &apos;return a*b;&apos; =&amp;gt; &apos;return (long)a*b&apos;.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_TMC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>toomanyconfigs</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Too many configs</DisplayName>
        <Description></Description>
        <HelpText>The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time. For more details, use --enable=information.</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Info</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_TS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>thisSubtraction</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>This Subtraction</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Suspicious pointer subtraction. Did you intend to write &apos;-&amp;gt;&apos;?&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_TSTRC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>terminateStrncpy</OriginalId>
      <GroupMember>Buffer Overrun Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Terminate Strncpy</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The buffer &apos;buffer&apos; may not be null-terminated after the call to strncpy(). If the source string&apos;s size fits or exceeds the given size, strncpy() does not add a zero at the end of the buffer. This causes bugs later in the code if the code assumes buffer is null-terminated.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>leakUnsafeArgAlloc</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unsafe allocation</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Unsafe allocation. If funcName() throws, memory could be leaked. Use make_shared&lt;int&gt;() instead.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UAA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>uselessAssignmentArg</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Useless Assignment Arg</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Assignment of function parameter has no effect outside the function.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UAPA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>useAutoPointerArray</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Auto Pointer Array</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Object pointed by an &apos;auto_ptr&apos; is destroyed using operator &apos;delete&apos;. This means that you should only use &apos;auto_ptr&apos; for pointers obtained with operator &apos;new&apos;. This excludes arrays, which are allocated by operator &apos;new[]&apos; and must be deallocated by operator &apos;delete[]&apos;.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UAPARG">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>uselessAssignmentPtrArg</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Useless Assignment Ptr Arg</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UAPC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>useAutoPointerContainer</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Auto Pointer Container</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;An element of container must be able to be copied but &apos;auto_ptr&apos; does not fulfill this requirement. You should consider to use &apos;shared_ptr&apos; or &apos;unique_ptr&apos;. It is suitable for use in containers, because they no longer copy their values, they move them.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UAPCPY">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>useAutoPointerCopy</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Auto Pointer Copy</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;&apos;std::auto_ptr&apos; has semantics of strict ownership, meaning that the &apos;auto_ptr&apos; instance is the sole entity responsible for the object&apos;s lifetime. If an &apos;auto_ptr&apos; is copied, the source looses the reference.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UAPM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>useAutoPointerMalloc</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Auto Pointer Malloc</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Object pointed by an &apos;auto_ptr&apos; is destroyed using operator &apos;delete&apos;. You should not use &apos;auto_ptr&apos; for pointers obtained with function &apos;malloc&apos;. This means that you should only use &apos;auto_ptr&apos; for pointers obtained with operator &apos;new&apos;. This excludes use C library allocation functions (for example &apos;malloc&apos;), which must be deallocated by the appropriate C library function.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UAV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>unassignedVariable</OriginalId>
      <GroupMember>Unnecessary and Unused Code Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unassigned Variable</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Variable &apos;varname&apos; is not assigned a value.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UCC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>uselessCallsCompare</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Useless Calls Compare</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;&apos;std::string::find()&apos; returns zero when given itself as parameter (str.find(str)). As it is currently the code is inefficient. It is possible either the string searched (&apos;str&apos;) or searched for (&apos;str&apos;) is wrong.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UCCDBZ">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>unsafeClassDivZero</OriginalId>
      <GroupMember>Division Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unsafe Class Can Divide By Zero</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Public interface of Class is not safe. When calling Class::dostuff(), if parameter x is 0 that leads to division by zero.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UCCL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>unsafeClassCanLeak</OriginalId>
      <GroupMember>Memory Handling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unsafe Class Can Leak</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The class &apos;class&apos; is unsafe, wrong usage can cause memory/resource leaks for &apos;class::varname&apos;. This can for instance be fixed by adding proper cleanup in the destructor.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UCE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>uselessCallsEmpty</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Useless Calls Empty</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Ineffective call of function &apos;empty()&apos;. Did you intend to call &apos;clear()&apos; instead?&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UCF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>useClosedFile</OriginalId>
      <GroupMember>Input Output Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Closed File</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Used file that is not opened.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UCR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>uselessCallsRemove</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Useless Calls Remove</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The return value of std::remove() is ignored. This function returns an iterator to the end of the range containing those elements that should be kept. Elements past new end remain valid but with unspecified values. Use the erase method of the container to delete them.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UCS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>uselessCallsSwap</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Useless Calls Swap</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The &apos;swap()&apos; function has no logical effect when given itself as parameter (str.swap(str)). As it is currently the code is inefficient. Is the object or the parameter wrong here?&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UCSS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>uselessCallsSubstr</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Useless Calls Substr</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Ineffective call of function &apos;substr&apos; because it returns a copy of the object. Use operator= instead.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UEO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>unknownEvaluationOrder</OriginalId>
      <GroupMember>Side Effect Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unknown Evaluation Order</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Expression &apos;x = x++;&apos; depends on order of evaluation of side effects&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UES">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>unhandledExceptionSpecification</OriginalId>
      <GroupMember>Exception Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unhandled Exception Specification</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Unhandled exception specification when calling function foo(). Either use a try/catch around the function call, or add a exception specification for funcname() also.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UID">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>uninitdata</OriginalId>
      <GroupMember>Initialization Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Uninitialized Data</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Memory is allocated but not initialized: varname&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UIL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>useInitializationList</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Initialization List</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;variable&apos; a value by passing the value to the constructor in the initialization list.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UISM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>uninitStructMember</OriginalId>
      <GroupMember>Initialization Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Uninit Struct Member</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Uninitialized struct member: a.b&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UIV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>uninitvar</OriginalId>
      <GroupMember>Initialization Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Uninitialized Variable</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Uninitialized variable: varname&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>unusedLabel</OriginalId>
      <GroupMember>Unnecessary and Unused Code Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unused Label</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Label &apos;&apos; is not used.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ULTZ">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>unsignedLessThanZero</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unsigned Less Than Zero</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The unsigned variable &apos;varname&apos; will never be negative so it is either pointless or an error to check if it is.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UMV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>uninitMemberVar</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Uninitialized Member Variable</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Member variable &apos;classname::varname&apos; is not initialized in the constructor.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>unsignedPositive</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unsigned Positive</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Unsigned variable &apos;varname&apos; can&apos;t be negative so it is unnecessary to test it.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UPF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>unusedPrivateFunction</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unused Private Function</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Unused private function: &apos;classname::funcname&apos;&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UPMC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>unpreciseMathCall</OriginalId>
      <GroupMember>API Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unprecise Math Call</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Expression &apos;1 - erf(x)&apos; can be replaced by &apos;erfc(x)&apos; to avoid loss of precision.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_URC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>unreachableCode</OriginalId>
      <GroupMember>Unreachable Code Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unreachable Code</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Statements following return, break, continue, goto or throw will never be executed.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_URV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>unreadVariable</OriginalId>
      <GroupMember>Unnecessary and Unused Code Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unread Variable</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Variable &apos;varname&apos; is assigned a value that is never used.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_USA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>useStlAlgorithm</OriginalId>
      <GroupMember>STL Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use STL Algorithm</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Consider using algorithm instead of a raw loop.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_USL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>unusedLabelSwitch</OriginalId>
      <GroupMember>Unnecessary and Unused Code Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unused Switch Label</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Label &apos;&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UUAM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>unusedAllocatedMemory</OriginalId>
      <GroupMember>Unnecessary and Unused Code Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unused Allocated Memory</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Variable &apos;varname&apos; is allocated memory that is never used.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UUF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>unusedFunction</OriginalId>
      <GroupMember>Unnecessary and Unused Code Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unused Function</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The function &apos;funcName&apos; is never used.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UUSM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>unusedStructMember</OriginalId>
      <GroupMember>Unnecessary and Unused Code Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unused Struct Member</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;struct member &apos;structname::variable&apos; is never used.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UUSO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>unusedScopedObject</OriginalId>
      <GroupMember>Suspicious Construct Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unused Scoped Object</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Instance of &apos;varname&apos; object is destroyed immediately.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_UUV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>unusedVariable</OriginalId>
      <GroupMember>Unnecessary and Unused Code Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unused Variable</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Unused variable: varname&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_VAEM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>va_end_missing</OriginalId>
      <GroupMember>Variable Argument Related Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Va_end Missing</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;va_list &apos;vl&apos; was opened but not closed by va_end().&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_VALUBS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>va_list_usedBeforeStarted</OriginalId>
      <GroupMember>Variable Argument Related Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Va_list Used Before Started</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;va_list &apos;vl&apos; used before va_start() was called.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_VASRP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>va_start_referencePassed</OriginalId>
      <GroupMember>Variable Argument Related Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Va_start Reference Passed</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Using reference &apos;arg1&apos; as parameter for va_start() results in undefined behaviour.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_VASSC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>va_start_subsequentCalls</OriginalId>
      <GroupMember>Variable Argument Related Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Va_start Subsequent Calls</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;va_start() or va_copy() called subsequently on &apos;vl&apos; without va_end() in between.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_VASWP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>va_start_wrongParameter</OriginalId>
      <GroupMember>Variable Argument Related Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Va_start Wrong Parameter</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;&apos;arg1&apos; given to va_start() is not last named argument of the function. Did you intend to pass &apos;arg2&apos;?&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_VCIC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>virtualCallInConstructor</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Virtual Call In Constructor</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Virtual function &apos;f&apos; is called from constructor &apos;&apos; at line 1. Dynamic binding is not used.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_VCWSL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>literalWithCharPtrCompare</OriginalId>
      <GroupMember>Simple Type Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Variable Comparison With String Literal</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;String literal compared with variable &apos;foo&apos;. Did you intend to use strcmp() instead?&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_VD">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>virtualDestructor</OriginalId>
      <GroupMember>Object Orientedness Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Virtual Destructor</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Class &apos;Base&apos; which is inherited by class &apos;Derived&apos; does not have a virtual destructor. If you destroy instances of the derived class by deleting a pointer that points to the base class, only the destructor of the base class is executed. Thus, dynamic memory that is managed by the derived class could leak. This can be avoided by adding a virtual destructor to the base class.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_VFNUB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>varFuncNullUB</OriginalId>
      <GroupMember>Variable Argument Related Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Var Func Null UB</DisplayName>
        <Description></Description>
        <HelpText>Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_VS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>variableScope</OriginalId>
      <GroupMember>Readability and Consistency Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Variable Scope</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The scope of the variable &apos;varname&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops.&lt;/p&gt;&#x0A;&lt;p&gt;Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:&lt;/p&gt;&#x0A;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode cpp&quot;&gt;&lt;code class=&quot;sourceCode cpp&quot;&gt;&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; f(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; x)&#x0A;{&#x0A;    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;&#x0A;    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (x) {&#x0A;        &lt;span class=&quot;co&quot;&gt;// it&amp;#39;s safe to move &amp;#39;int i = 0;&amp;#39; here&lt;/span&gt;&#x0A;        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; n = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; n &amp;lt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;; ++n) {&#x0A;            &lt;span class=&quot;co&quot;&gt;// it is possible but not safe to move &amp;#39;int i = 0;&amp;#39; here&lt;/span&gt;&#x0A;            do_something(&amp;amp;i);&#x0A;        }&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#x0A;&lt;p&gt;When you see this message it is always safe to reduce the variable scope 1 level.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_WMC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>wrongmathcall</OriginalId>
      <GroupMember>API Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Wrong Math Call</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Passing value &apos;#&apos; to #() leads to implementation-defined result.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_WPPS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>wrongPipeParameterSize</OriginalId>
      <GroupMember>API Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Wrong Pipe Parameter Size</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;The pipe()/pipe2() system command takes an argument, which is an array of exactly two integers. The variable &apos;varname&apos; is an array of size dimension, which does not match.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_WPSAN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>wrongPrintfScanfArgNum</OriginalId>
      <GroupMember>Input Output Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Wrong Printf Scanf Arg Num</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;printf format string requires 3 parameters but only 2 are given.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_WPSPPE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>wrongPrintfScanfParameterPositionError</OriginalId>
      <GroupMember>Input Output Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Wrong Printf Scanf Parameter Position Error</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;printf: referencing parameter 2 while 1 arguments given&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_WROF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>writeReadOnlyFile</OriginalId>
      <GroupMember>Input Output Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Write Read Only File</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Write operation on a file that was opened only for reading.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ZD">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>zerodiv</OriginalId>
      <GroupMember>Division Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Zerodiv</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Division by zero.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "CPPCHECK_ZDC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>zerodivcond</OriginalId>
      <GroupMember>Division Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Zerodivcond</DisplayName>
        <Description></Description>
        <HelpText>&lt;p&gt;Either the condition is redundant or there is division by zero.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Conditional Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Conditional Rules</DisplayName>
        <Description>The Conditional Ruleset contains rules that find condition mistakes.</Description>
        <HelpText>The Conditional Ruleset contains rules that find condition mistakes.</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Division Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Division Rules</DisplayName>
        <Description>The Division Ruleset contains rules about the division operator.</Description>
        <HelpText>The Division Ruleset contains rules about the division operator.</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Exception Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Exception Rules</DisplayName>
        <Description>The Exception Ruleset contains rules about throwing and catching exceptions.</Description>
        <HelpText>The Exception Ruleset contains rules about throwing and catching exceptions.</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Initialization Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Initialization Rules</DisplayName>
        <Description>The Initialization Ruleset contains rules about the initialization of allocated memory, variables and members.</Description>
        <HelpText>The Initialization Ruleset contains rules about the initialization of allocated memory, variables and members.</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Input Output Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Input Output Rules</DisplayName>
        <Description>The Input Output Ruleset contains rules for input output operations.</Description>
        <HelpText>The Input Output Ruleset contains rules for input output operations.</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Memory Handling Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Memory Handling Rules</DisplayName>
        <Description>The Memory Handling Ruleset contains rules about memory leaks and common memory management problems.</Description>
        <HelpText>The Memory Handling Ruleset contains rules about memory leaks and common memory management problems.</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Object Orientedness Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Object Orientedness Rules</DisplayName>
        <Description>The Object Orientedness Ruleset contains rules that find various mistakes about classes and other object orientedness related constructs.</Description>
        <HelpText>The Object Orientedness Ruleset contains rules that find various mistakes about classes and other object orientedness related constructs.</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Performance Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Performance Rules</DisplayName>
        <Description>The Performance Ruleset contains rules that find various performance issues.</Description>
        <HelpText>The Performance Ruleset contains rules that find various performance issues.</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Portability Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Portability Rules</DisplayName>
        <Description>The Portability Ruleset contains rules that find portability issues.</Description>
        <HelpText>The Portability Ruleset contains rules that find portability issues.</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Preprocessor Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Preprocessor Rules</DisplayName>
        <Description>The Preprocessor Ruleset contains rules about preprocessor definitions.</Description>
        <HelpText>The Preprocessor Ruleset contains rules about preprocessor definitions.</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Readability and Consistency Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Readability and Consistency Rules</DisplayName>
        <Description>The Readability and Consistency Ruleset contains rules about constructs that reduce the code readability.</Description>
        <HelpText>The Readability and Consistency Ruleset contains rules about constructs that reduce the code readability.</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "STL Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>STL Rules</DisplayName>
        <Description>The STL Ruleset contains rules that find mistakes of STL usage (invalidation of iterators, mismatching containers, etc).</Description>
        <HelpText>The STL Ruleset contains rules that find mistakes of STL usage (invalidation of iterators, mismatching containers, etc).</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Side Effect Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Side Effect Rules</DisplayName>
        <Description>The Side Effect Ruleset contains rules that find suspicious constructs that can have side effects.</Description>
        <HelpText>The Side Effect Ruleset contains rules that find suspicious constructs that can have side effects.</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Simple Type Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Simple Type Rules</DisplayName>
        <Description>The Simple Type Ruleset contains rules that find simple type related issues.</Description>
        <HelpText>The Simple Type Ruleset contains rules that find simple type related issues.</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Sizeof Operator Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Sizeof Operator Rules</DisplayName>
        <Description>The Sizeof Operator Ruleset contains rules that check usage of sizeof operator.</Description>
        <HelpText>The Sizeof Operator Ruleset contains rules that check usage of sizeof operator.</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Suspicious Construct Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Suspicious Construct Rules</DisplayName>
        <Description>The Suspicious Construct Ruleset contains rules about constructs that are redundant or could lead to unexpected results.</Description>
        <HelpText>The Suspicious Construct Ruleset contains rules about constructs that are redundant or could lead to unexpected results.</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Unnecessary and Unused Code Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unnecessary and Unused Code Rules</DisplayName>
        <Description>The Unnecessary and Unused Code Ruleset contains a collection of rules for unnecessary,unused or ineffective code.</Description>
        <HelpText>The Unnecessary and Unused Code Ruleset contains a collection of rules for unnecessary,unused or ineffective code.</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Unreachable Code Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unreachable Code Rules</DisplayName>
        <Description>The Unreachable Code Ruleset contains rules about code sections that can never be executed.</Description>
        <HelpText>The Unreachable Code Ruleset contains rules about code sections that can never be executed.</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Variable Argument Related Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Variable Argument Related Rules</DisplayName>
        <Description>The Variable Argument Related Ruleset contains rules about the usage of va_start and va_end functions.</Description>
        <HelpText>The Variable Argument Related Ruleset contains rules about the usage of va_start and va_end functions.</HelpText>
      </Language>
      <Baselines/>
      <Settings/>
      <Calculated/>
    </Configuration>
  </Metric>
</Rul>
