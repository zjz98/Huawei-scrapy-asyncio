<?xml version="1.0" encoding="UTF-8"?>
<Rul xmlns = "http://www.frontendart.com" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation = "http://www.frontendart.com rul.xsd">
  <ToolDescription>
    <Configuration name = "Default">
      <ToolDescriptionItem name = "ID">Pylint</ToolDescriptionItem>
    </Configuration>
  </ToolDescription>
  <Configurations/>
  <Views/>
  <Edges/>
  <Metric id = "Async Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>async</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Async Rules</DisplayName>
        <Description>Async Rules</Description>
        <HelpText>Async Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Basic Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>basic</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Basic Rules</DisplayName>
        <Description>Basic Rules</Description>
        <HelpText>Basic Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Class Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>classes</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Class Rules</DisplayName>
        <Description>Class Rules</Description>
        <HelpText>Class Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Design Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>design</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Design Rules</DisplayName>
        <Description>Design Rules</Description>
        <HelpText>Design Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Exception Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>exceptions</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Exception Rules</DisplayName>
        <Description>Exception Rules</Description>
        <HelpText>Exception Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Format Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>format</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Format Rules</DisplayName>
        <Description>Format Rules</Description>
        <HelpText>Format Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Import Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>imports</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Import Rules</DisplayName>
        <Description>Import Rules</Description>
        <HelpText>Import Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Iterable Check Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>iterable_check</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Iterable Check Rules</DisplayName>
        <Description>Iterable Check Rules</Description>
        <HelpText>Iterable Check Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Len Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>len</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Len Rules</DisplayName>
        <Description>Len Rules</Description>
        <HelpText>Len Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Logging Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>logging</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Logging Rules</DisplayName>
        <Description>Logging Rules</Description>
        <HelpText>Logging Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Miscellaneous Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>miscellaneous</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Miscellaneous Rules</DisplayName>
        <Description>Miscellaneous Rules</Description>
        <HelpText>Miscellaneous Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Newstyle Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>newstyle</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Newstyle Rules</DisplayName>
        <Description>Newstyle Rules</Description>
        <HelpText>Newstyle Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_AB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>apply-builtin</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Apply Builtin</DisplayName>
        <Description>Used when the apply built-in function is referenced (missing from Python 3).</Description>
        <HelpText>&lt;p&gt;Used when the apply built-in function is referenced (missing from Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>apply built-in referenced</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ABIS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>anomalous-backslash-in-string</OriginalId>
      <GroupMember>String Constant Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Anomalous Backslash In String</DisplayName>
        <Description>Used when a backslash is in a literal string but not as an escape.</Description>
        <HelpText>&lt;p&gt;Used when a backslash is in a literal string but not as an escape.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Anomalous backslash in string: &apos;%s&apos;. String constant might be missing an r prefix.</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ACI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>abstract-class-instantiated</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Abstract Class Instantiated</DisplayName>
        <Description>Used when an abstract class with `abc.ABCMeta` as metaclass has abstract methods and is instantiated.</Description>
        <HelpText>&lt;p&gt;Used when an abstract class with &lt;code&gt;abc.ABCMeta&lt;/code&gt; as metaclass has abstract methods and is instantiated.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Abstract class %r with abstract methods instantiated</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_AD">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>arguments-differ</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Arguments Differ</DisplayName>
        <Description>Used when a method has a different number of arguments than in the implemented interface or in an overridden method.</Description>
        <HelpText>&lt;p&gt;Used when a method has a different number of arguments than in the implemented interface or in an overridden method.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Parameters differ from %s %r method</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ADOI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>attribute-defined-outside-init</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Attribute Defined Outside Init</DisplayName>
        <Description>Used when an instance attribute is defined outside the __init__ method.</Description>
        <HelpText>&lt;p&gt;Used when an instance attribute is defined outside the __init__ method.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Attribute %r defined outside __init__</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_AE">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>astroid-error</OriginalId>
      <GroupMember>Pylint Checker Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Astroid Error</DisplayName>
        <Description>Used when an unexpected error occurred while building the Astroid representation. This is usually accompanied by a traceback. Please report such errors!</Description>
        <HelpText>Used when an unexpected error occurred while building the Astroid representation. This is usually accompanied by a traceback. Please report such errors!</HelpText>
        <WarningText>%s: %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_AFN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>assignment-from-none</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Assignment From None</DisplayName>
        <Description>Used when an assignment is done on a function call but the inferred function returns nothing but None.</Description>
        <HelpText>&lt;p&gt;Used when an assignment is done on a function call but the inferred function returns nothing but None.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Assigning to function call which only returns None</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_AFNR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>assignment-from-no-return</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Assignment From No Return</DisplayName>
        <Description>Used when an assignment is done on a function call but the inferred function doesn&apos;t return anything.</Description>
        <HelpText>&lt;p&gt;Used when an assignment is done on a function call but the inferred function doesn’t return anything.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Assigning to function call which doesn&apos;t return</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_AM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>abstract-method</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Abstract Method</DisplayName>
        <Description>Used when an abstract method (i.e. raise NotImplementedError) is not overridden in concrete class.</Description>
        <HelpText>&lt;p&gt;Used when an abstract method (i.e. raise NotImplementedError) is not overridden in concrete class.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Method %r is abstract in class %r but is not overridden</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_AMBD">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>access-member-before-definition</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Access Member Before Definition</DisplayName>
        <Description>Used when an instance member is accessed before it&apos;s actually assigned.</Description>
        <HelpText>&lt;p&gt;Used when an instance member is accessed before it’s actually assigned.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Access to member %r before its definition line %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ANS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>assigning-non-slot</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Assigning Non Slot</DisplayName>
        <Description>Used when assigning to an attribute not defined in the class slots.</Description>
        <HelpText>&lt;p&gt;Used when assigning to an attribute not defined in the class slots.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Assigning to attribute %r not defined in class slots</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_AOT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>assert-on-tuple</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Assert On Tuple</DisplayName>
        <Description>A call of assert on a tuple will always evaluate to true if the tuple is not empty, and will always evaluate to false if it is.</Description>
        <HelpText>&lt;p&gt;A call of assert on a tuple will always evaluate to true if the tuple is not empty, and will always evaluate to false if it is.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Assert called on a 2-uple. Did you mean &apos;assert x,y&apos;?</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ATNK">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>assign-to-new-keyword</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Assign To New Keyword</DisplayName>
        <Description>Used when assignment will become invalid in future Python release due to introducing new keyword.</Description>
        <HelpText>&lt;p&gt;Used when assignment will become invalid in future Python release due to introducing new keyword.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Name %s will become a keyword in Python %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_AUEIS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>anomalous-unicode-escape-in-string</OriginalId>
      <GroupMember>String Constant Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Anomalous Unicode Escape In String</DisplayName>
        <Description>Used when an escape like \u is encountered in a byte string where it has no effect.</Description>
        <HelpText>&lt;p&gt;Used when an escape like \u is encountered in a byte string where it has no effect.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Anomalous Unicode escape in byte string: &apos;%s&apos;. String constant might be missing an r or u prefix.</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_B">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>backtick</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Backtick</DisplayName>
        <Description>Used when the deprecated &quot;``&quot; (backtick) operator is used instead of the str() function.</Description>
        <HelpText>&lt;p&gt;Used when the deprecated “``” (backtick) operator is used instead of the str() function.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Use of the `` operator</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>bad-continuation</OriginalId>
      <GroupMember>Format Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Continuation</DisplayName>
        <Description>TODO</Description>
        <HelpText>&lt;p&gt;TODO&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Wrong %s indentation%s%s.</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BCA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>bad-classmethod-argument</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Classmethod Argument</DisplayName>
        <Description>Used when a class method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to &quot;cls&quot;), recommended to easily differentiate them from regular instance methods.</Description>
        <HelpText>&lt;p&gt;Used when a class method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to “cls”), recommended to easily differentiate them from regular instance methods.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Class method %s should have %s as first argument</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BD">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>boolean-datetime</OriginalId>
      <GroupMember>Stdlib Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Boolean Datetime</DisplayName>
        <Description>Using datetime.time in a boolean context can hide subtle bugs when the time they represent matches midnight UTC. This behaviour was fixed in Python 3.5. See http://bugs.python.org/issue13936 for reference. This message can&apos;t be emitted when using Python &gt;= 3.5.</Description>
        <HelpText>&lt;p&gt;Using datetime.time in a boolean context can hide subtle bugs when the time they represent matches midnight UTC. This behaviour was fixed in Python 3.5. See &lt;a href=&quot;http://bugs.python.org/issue13936&quot; class=&quot;uri&quot;&gt;http://bugs.python.org/issue13936&lt;/a&gt; for reference. This message can’t be emitted when using Python &amp;gt;= 3.5.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Using datetime.time in a boolean context.</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>bare-except</OriginalId>
      <GroupMember>Exception Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bare Except</DisplayName>
        <Description>Used when an except clause doesn&apos;t specify exceptions type to catch.</Description>
        <HelpText>&lt;p&gt;Used when an except clause doesn’t specify exceptions type to catch.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>No exception type(s) specified</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BEC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>bad-exception-context</OriginalId>
      <GroupMember>Exception Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Exception Context</DisplayName>
        <Description>Used when using the syntax &quot;raise ... from ...&quot;, where the exception context is not an exception, nor None. This message can&apos;t be emitted when using Python &lt; 3.0.</Description>
        <HelpText>&lt;p&gt;Used when using the syntax “raise … from …”, where the exception context is not an exception, nor None. This message can’t be emitted when using Python &amp;lt; 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Exception context set to something which is not an exception, nor None</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BEO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>bad-except-order</OriginalId>
      <GroupMember>Exception Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Except Order</DisplayName>
        <Description>Used when except clauses are not in the correct order (from the more specific to the more generic). If you don&apos;t fix the order, some exceptions may not be caught by the most specific handler.</Description>
        <HelpText>&lt;p&gt;Used when except clauses are not in the correct order (from the more specific to the more generic). If you don’t fix the order, some exceptions may not be caught by the most specific handler.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Bad except clauses order (%s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BFC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>bad-format-character</OriginalId>
      <GroupMember>String Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Format Character</DisplayName>
        <Description>Used when a unsupported format character is used in a format string.</Description>
        <HelpText>&lt;p&gt;Used when a unsupported format character is used in a format string.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Unsupported format character %r (%#02x) at index %d</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BFS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>bad-format-string</OriginalId>
      <GroupMember>String Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Format String</DisplayName>
        <Description>Used when a PEP 3101 format string is invalid. This message can&apos;t be emitted when using Python &lt; 2.7.</Description>
        <HelpText>&lt;p&gt;Used when a PEP 3101 format string is invalid. This message can’t be emitted when using Python &amp;lt; 2.7.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Invalid format string</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BFSK">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>bad-format-string-key</OriginalId>
      <GroupMember>String Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Format String Key</DisplayName>
        <Description>Used when a format string that uses named conversion specifiers is used with a dictionary whose keys are not all strings.</Description>
        <HelpText>&lt;p&gt;Used when a format string that uses named conversion specifiers is used with a dictionary whose keys are not all strings.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Format string dictionary key should be a string, not %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>bad-indentation</OriginalId>
      <GroupMember>Format Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Indentation</DisplayName>
        <Description>Used when an unexpected number of indentation&apos;s tabulations or spaces has been found.</Description>
        <HelpText>&lt;p&gt;Used when an unexpected number of indentation’s tabulations or spaces has been found.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Bad indentation. Found %s %s, expected %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BIO">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>bad-inline-option</OriginalId>
      <GroupMember>Pylint Checker Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Inline Option</DisplayName>
        <Description>Used when an inline option is either badly formatted or can&apos;t be used inside modules.</Description>
        <HelpText>Used when an inline option is either badly formatted or can&apos;t be used inside modules.</HelpText>
        <WarningText>Unable to consider inline option %r</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BMCA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>bad-mcs-classmethod-argument</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Mcs Classmethod Argument</DisplayName>
        <Description>Used when a metaclass class method has a first argument named differently than the value specified in valid-metaclass-classmethod-first-arg option (default to &quot;mcs&quot;), recommended to easily differentiate them from regular instance methods.</Description>
        <HelpText>&lt;p&gt;Used when a metaclass class method has a first argument named differently than the value specified in valid-metaclass-classmethod-first-arg option (default to “mcs”), recommended to easily differentiate them from regular instance methods.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Metaclass class method %s should have %s as first argument</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BMMA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>bad-mcs-method-argument</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Mcs Method Argument</DisplayName>
        <Description>Used when a metaclass method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to &quot;cls&quot;), recommended to easily differentiate them from regular instance methods.</Description>
        <HelpText>&lt;p&gt;Used when a metaclass method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to “cls”), recommended to easily differentiate them from regular instance methods.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Metaclass method %s should have %s as first argument</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>blacklisted-name</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Blacklisted Name</DisplayName>
        <Description>Used when the name is listed in the black list (unauthorized names).</Description>
        <HelpText>&lt;p&gt;Used when the name is listed in the black list (unauthorized names).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Black listed name &quot;%s&quot;</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BOE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>binary-op-exception</OriginalId>
      <GroupMember>Exception Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Binary Op Exception</DisplayName>
        <Description>Used when the exception to catch is of the form &quot;except A or B:&quot;. If intending to catch multiple, rewrite as &quot;except (A, B):&quot;.</Description>
        <HelpText>&lt;p&gt;Used when the exception to catch is of the form “except A or B:”. If intending to catch multiple, rewrite as “except (A, B):”.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Exception to catch is the result of a binary &quot;%s&quot; operation</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BOM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>bad-open-mode</OriginalId>
      <GroupMember>Stdlib Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Open Mode</DisplayName>
        <Description>Python supports: r, w, a[, x] modes with b, +, and U (only with r) options. See http://docs.python.org/2/library/functions.html#open.</Description>
        <HelpText>&lt;p&gt;Python supports: r, w, a[, x] modes with b, +, and U (only with r) options. See &lt;a href=&quot;http://docs.python.org/2/library/functions.html#open&quot; class=&quot;uri&quot;&gt;http://docs.python.org/2/library/functions.html#open&lt;/a&gt;.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>&quot;%s&quot; is not a valid mode for open.</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BOV">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>bad-option-value</OriginalId>
      <GroupMember>Pylint Checker Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Option Value</DisplayName>
        <Description>Used when a bad value for an inline option is encountered.</Description>
        <HelpText>Used when a bad value for an inline option is encountered.</HelpText>
        <WarningText>Bad option value %r</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BP3I">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>bad-python3-import</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Python3 Import</DisplayName>
        <Description>Used when importing a module that no longer exists in Python 3.</Description>
        <HelpText>&lt;p&gt;Used when importing a module that no longer exists in Python 3.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Module moved in Python 3</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BRS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>bad-reversed-sequence</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Reversed Sequence</DisplayName>
        <Description>Used when the first argument to reversed() builtin isn&apos;t a sequence (does not implement __reversed__, nor __getitem__ and __len__.</Description>
        <HelpText>&lt;p&gt;Used when the first argument to reversed() builtin isn’t a sequence (does not implement __reversed__, nor __getitem__ and __len__.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>The first reversed() argument is not a sequence</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BSA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>bad-staticmethod-argument</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Staticmethod Argument</DisplayName>
        <Description>Used when a static method has &quot;self&quot; or a value specified in valid-classmethod-first-arg option or valid-metaclass-classmethod-first-arg option as first argument.</Description>
        <HelpText>&lt;p&gt;Used when a static method has “self” or a value specified in valid-classmethod-first-arg option or valid-metaclass-classmethod-first-arg option as first argument.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Static method with %r as first argument</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BSC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>bad-super-call</OriginalId>
      <GroupMember>Newstyle Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Super Call</DisplayName>
        <Description>Used when another argument than the current class is given as first argument of the super builtin.</Description>
        <HelpText>&lt;p&gt;Used when another argument than the current class is given as first argument of the super builtin.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Bad first argument %r given to super()</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BSSC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>bad-str-strip-call</OriginalId>
      <GroupMember>String Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Str Strip Call</DisplayName>
        <Description>The argument to a str.{l,r,}strip call contains a duplicate character.</Description>
        <HelpText>&lt;p&gt;The argument to a str.{l,r,}strip call contains a duplicate character.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Suspicious argument in %s.%s call</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BTI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>bad-thread-instantiation</OriginalId>
      <GroupMember>Stdlib Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Thread Instantiation</DisplayName>
        <Description>The warning is emitted when a threading.Thread class is instantiated without the target function being passed. By default, the first parameter is the group param, not the target param.</Description>
        <HelpText>&lt;p&gt;The warning is emitted when a threading.Thread class is instantiated without the target function being passed. By default, the first parameter is the group param, not the target param.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>threading.Thread needs the target function</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BW">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>bad-whitespace</OriginalId>
      <GroupMember>Format Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Whitespace</DisplayName>
        <Description>Used when a wrong number of spaces is used around an operator, bracket or block opener.</Description>
        <HelpText>&lt;p&gt;Used when a wrong number of spaces is used around an operator, bracket or block opener.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>%s space %s %s %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BaB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>basestring-builtin</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Basestring Builtin</DisplayName>
        <Description>Used when the basestring built-in function is referenced (missing from Python 3).</Description>
        <HelpText>&lt;p&gt;Used when the basestring built-in function is referenced (missing from Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>basestring built-in referenced</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BrE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>broad-except</OriginalId>
      <GroupMember>Exception Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Broad Except</DisplayName>
        <Description>Used when an except catches a too general exception, possibly burying unrelated errors.</Description>
        <HelpText>&lt;p&gt;Used when an except catches a too general exception, possibly burying unrelated errors.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Catching too general exception %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_BuB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>buffer-builtin</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Buffer Builtin</DisplayName>
        <Description>Used when the buffer built-in function is referenced (missing from Python 3).</Description>
        <HelpText>&lt;p&gt;Used when the buffer built-in function is referenced (missing from Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>buffer built-in referenced</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_CB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>cmp-builtin</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Cmp Builtin</DisplayName>
        <Description>Used when the cmp built-in function is referenced (missing from Python 3).</Description>
        <HelpText>&lt;p&gt;Used when the cmp built-in function is referenced (missing from Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>cmp built-in referenced</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_CE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>comprehension-escape</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Comprehension Escape</DisplayName>
        <Description>Emitted when using a variable, that was bound in a comprehension handler, outside of the comprehension itself. On Python 3 these variables will be deleted outside of the comprehension.</Description>
        <HelpText>&lt;p&gt;Emitted when using a variable, that was bound in a comprehension handler, outside of the comprehension itself. On Python 3 these variables will be deleted outside of the comprehension.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Using a variable that was bound inside a comprehension</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_CENM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>c-extension-no-member</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>C Extension No Member</DisplayName>
        <Description>Used when a variable is accessed for non-existent member of C extension. Due to unavailability of source static analysis is impossible, but it may be performed by introspecting living objects in run-time.</Description>
        <HelpText>&lt;p&gt;Used when a variable is accessed for non-existent member of C extension. Due to unavailability of source static analysis is impossible, but it may be performed by introspecting living objects in run-time.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>%s %r has not %r member%s, but source is unavailable. Consider adding this module to extension-pkg-whitelist if you want to perform analysis based on run-time introspection of living objects.</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_CI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>cyclic-import</OriginalId>
      <GroupMember>Import Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Cyclic Import</DisplayName>
        <Description>Used when a cyclic import between two or more modules is detected.</Description>
        <HelpText>&lt;p&gt;Used when a cyclic import between two or more modules is detected.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Cyclic import (%s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_CID">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>consider-iterating-dictionary</OriginalId>
      <GroupMember>Refactoring Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Consider Iterating Dictionary</DisplayName>
        <Description>Emitted when the keys of a dictionary are iterated through the .keys() method. It is enough to just iterate through the dictionary itself, as in &quot;for key in dictionary&quot;.</Description>
        <HelpText>&lt;p&gt;Emitted when the keys of a dictionary are iterated through the .keys() method. It is enough to just iterate through the dictionary itself, as in “for key in dictionary”.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Consider iterating the dictionary directly instead of calling .keys()</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_CIF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>continue-in-finally</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Continue In Finally</DisplayName>
        <Description>Emitted when the `continue` keyword is found inside a finally clause, which is a SyntaxError.</Description>
        <HelpText>&lt;p&gt;Emitted when the &lt;code&gt;continue&lt;/code&gt; keyword is found inside a finally clause, which is a SyntaxError.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>&apos;continue&apos; not supported inside &apos;finally&apos; clause</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_CM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>cmp-method</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Cmp Method</DisplayName>
        <Description>Used when a __cmp__ method is defined (method is not used by Python 3).</Description>
        <HelpText>&lt;p&gt;Used when a __cmp__ method is defined (method is not used by Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>__cmp__ method defined</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_CMI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>consider-merging-isinstance</OriginalId>
      <GroupMember>Refactoring Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Consider Merging Isinstance</DisplayName>
        <Description>Used when multiple consecutive isinstance calls can be merged into one.</Description>
        <HelpText>&lt;p&gt;Used when multiple consecutive isinstance calls can be merged into one.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Consider merging these isinstance calls to isinstance(%s, (%s))</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_CNE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>catching-non-exception</OriginalId>
      <GroupMember>Exception Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Catching Non Exception</DisplayName>
        <Description>Used when a class which doesn&apos;t inherit from Exception is used as an exception in an except clause.</Description>
        <HelpText>&lt;p&gt;Used when a class which doesn’t inherit from Exception is used as an exception in an except clause.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Catching an exception which doesn&apos;t inherit from Exception: %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_CUE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>consider-using-enumerate</OriginalId>
      <GroupMember>Refactoring Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Consider Using Enumerate</DisplayName>
        <Description>Emitted when code that iterates with range and len is encountered. Such code can be simplified by using the enumerate builtin.</Description>
        <HelpText>&lt;p&gt;Emitted when code that iterates with range and len is encountered. Such code can be simplified by using the enumerate builtin.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Consider using enumerate instead of iterating with range and len</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_CUT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>consider-using-ternary</OriginalId>
      <GroupMember>Refactoring Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Consider Using Ternary</DisplayName>
        <Description>Used when one of known pre-python 2.5 ternary syntax is used.</Description>
        <HelpText>&lt;p&gt;Used when one of known pre-python 2.5 ternary syntax is used.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Consider using ternary (%s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_CVFL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>cell-var-from-loop</OriginalId>
      <GroupMember>Variable Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Cell Var From Loop</DisplayName>
        <Description>A variable used in a closure is defined in a loop. This will result in all closures using the same value for the closed-over variable.</Description>
        <HelpText>&lt;p&gt;A variable used in a closure is defined in a loop. This will result in all closures using the same value for the closed-over variable.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Cell variable %s defined in loop</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_CWS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>confusing-with-statement</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Confusing With Statement</DisplayName>
        <Description>Emitted when a `with` statement component returns multiple values and uses name binding with `as` only for a part of those values, as in with ctx() as a, b. This can be misleading, since it&apos;s not clear if the context manager returns a tuple or if the node without a name binding is another context manager.</Description>
        <HelpText>&lt;p&gt;Emitted when a &lt;code&gt;with&lt;/code&gt; statement component returns multiple values and uses name binding with &lt;code&gt;as&lt;/code&gt; only for a part of those values, as in with ctx() as a, b. This can be misleading, since it’s not clear if the context manager returns a tuple or if the node without a name binding is another context manager.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Following &quot;as&quot; with another context manager looks like a tuple.</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_CoB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>coerce-builtin</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Coerce Builtin</DisplayName>
        <Description>Used when the coerce built-in function is referenced (missing from Python 3).</Description>
        <HelpText>&lt;p&gt;Used when the coerce built-in function is referenced (missing from Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>coerce built-in referenced</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_CoM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>coerce-method</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Coerce Method</DisplayName>
        <Description>Used when a __coerce__ method is defined (method is not used by Python 3).</Description>
        <HelpText>&lt;p&gt;Used when a __coerce__ method is defined (method is not used by Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>__coerce__ method defined</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DAN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>duplicate-argument-name</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Duplicate Argument Name</DisplayName>
        <Description>Duplicate argument names in function definitions are syntax errors.</Description>
        <HelpText>&lt;p&gt;Duplicate argument names in function definitions are syntax errors.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Duplicate argument name %s in function definition</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>duplicate-bases</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Duplicate Bases</DisplayName>
        <Description>Used when a class has duplicate bases.</Description>
        <HelpText>&lt;p&gt;Used when a class has duplicate bases.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Duplicate bases for class %r</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>duplicate-code</OriginalId>
      <GroupMember>Similarity Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Duplicate Code</DisplayName>
        <Description>Indicates that a set of similar lines has been detected among multiple file. This usually means that the code should be refactored to avoid this duplication.</Description>
        <HelpText>Indicates that a set of similar lines has been detected among multiple file. This usually means that the code should be refactored to avoid this duplication.</HelpText>
        <WarningText>Similar lines in %s files</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DDV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>dangerous-default-value</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Dangerous Default Value</DisplayName>
        <Description>Used when a mutable value as list or dictionary is detected in a default value for an argument.</Description>
        <HelpText>&lt;p&gt;Used when a mutable value as list or dictionary is detected in a default value for an argument.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Dangerous default value %s as argument</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>duplicate-except</OriginalId>
      <GroupMember>Exception Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Duplicate Except</DisplayName>
        <Description>Used when an except catches a type that was already caught by a previous handler.</Description>
        <HelpText>&lt;p&gt;Used when an except catches a type that was already caught by a previous handler.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Catching previously caught exception type %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DIF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>deprecated-itertools-function</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Deprecated Itertools Function</DisplayName>
        <Description>Used when accessing a function on itertools that has been removed in Python 3.</Description>
        <HelpText>&lt;p&gt;Used when accessing a function on itertools that has been removed in Python 3.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Accessing a deprecated function on the itertools module</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DIM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>dict-iter-method</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Dict Iter Method</DisplayName>
        <Description>Used for calls to dict.iterkeys(), itervalues() or iteritems() (Python 3 lacks these methods).</Description>
        <HelpText>&lt;p&gt;Used for calls to dict.iterkeys(), itervalues() or iteritems() (Python 3 lacks these methods).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Calling a dict.iter*() method</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DINI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>dict-items-not-iterating</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Dict Items Not Iterating</DisplayName>
        <Description>Used when dict.items is referenced in a non-iterating context (returns an iterator in Python 3).</Description>
        <HelpText>&lt;p&gt;Used when dict.items is referenced in a non-iterating context (returns an iterator in Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>dict.items referenced when not iterating</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DK">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>duplicate-key</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Duplicate Key</DisplayName>
        <Description>Used when a dictionary expression binds the same key multiple times.</Description>
        <HelpText>&lt;p&gt;Used when a dictionary expression binds the same key multiple times.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Duplicate key %r in dictionary</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DKNI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>dict-keys-not-iterating</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Dict Keys Not Iterating</DisplayName>
        <Description>Used when dict.keys is referenced in a non-iterating context (returns an iterator in Python 3).</Description>
        <HelpText>&lt;p&gt;Used when dict.keys is referenced in a non-iterating context (returns an iterator in Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>dict.keys referenced when not iterating</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>deprecated-lambda</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Deprecated Lambda</DisplayName>
        <Description>Used when a lambda is the first argument to &quot;map&quot; or &quot;filter&quot;. It could be clearer as a list comprehension or generator expression. This message can&apos;t be emitted when using Python &gt;= 3.0.</Description>
        <HelpText>&lt;p&gt;Used when a lambda is the first argument to “map” or “filter”. It could be clearer as a list comprehension or generator expression. This message can’t be emitted when using Python &amp;gt;= 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>map/filter on lambda could be replaced by comprehension</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>delslice-method</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Delslice Method</DisplayName>
        <Description>Used when a __delslice__ method is defined (method is not used by Python 3).</Description>
        <HelpText>&lt;p&gt;Used when a __delslice__ method is defined (method is not used by Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>__delslice__ method defined</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DOF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>deprecated-operator-function</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Deprecated Operator Function</DisplayName>
        <Description>Used when accessing a field on operator module that has been removed in Python 3.</Description>
        <HelpText>&lt;p&gt;Used when accessing a field on operator module that has been removed in Python 3.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Accessing a removed attribute on the operator module</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DP">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>deprecated-pragma</OriginalId>
      <GroupMember>Pylint Checker Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Deprecated Pragma</DisplayName>
        <Description>Some inline pylint options have been renamed or reworked, only the most recent form should be used. NOTE:skip-all is only available with pylint &gt;= 0.26.</Description>
        <HelpText>Some inline pylint options have been renamed or reworked, only the most recent form should be used. NOTE:skip-all is only available with pylint &gt;= 0.26.</HelpText>
        <WarningText>Pragma &quot;%s&quot; is deprecated, use &quot;%s&quot; instead</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DSF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>deprecated-string-function</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Deprecated String Function</DisplayName>
        <Description>Used when accessing a string function that has been deprecated in Python 3.</Description>
        <HelpText>&lt;p&gt;Used when accessing a string function that has been deprecated in Python 3.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Accessing a deprecated function on the string module</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DSTC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>deprecated-str-translate-call</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Deprecated Str Translate Call</DisplayName>
        <Description>Used when using the deprecated deletechars parameters from str.translate. Use re.sub to remove the desired characters.</Description>
        <HelpText>&lt;p&gt;Used when using the deprecated deletechars parameters from str.translate. Use re.sub to remove the desired characters.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Using str.translate with deprecated deletechars parameters</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DTF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>deprecated-types-field</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Deprecated Types Field</DisplayName>
        <Description>Used when accessing a field on types that has been removed in Python 3.</Description>
        <HelpText>&lt;p&gt;Used when accessing a field on types that has been removed in Python 3.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Accessing a deprecated fields on the types module</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DUF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>deprecated-urllib-function</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Deprecated Urllib Function</DisplayName>
        <Description>Used when accessing a field on urllib module that has been removed or moved in Python 3.</Description>
        <HelpText>&lt;p&gt;Used when accessing a field on urllib module that has been removed or moved in Python 3.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Accessing a removed attribute on the urllib module</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DVM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>dict-view-method</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Dict View Method</DisplayName>
        <Description>Used for calls to dict.viewkeys(), viewvalues() or viewitems() (Python 3 lacks these methods).</Description>
        <HelpText>&lt;p&gt;Used for calls to dict.viewkeys(), viewvalues() or viewitems() (Python 3 lacks these methods).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Calling a dict.view*() method</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DVNI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>dict-values-not-iterating</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Dict Values Not Iterating</DisplayName>
        <Description>Used when dict.values is referenced in a non-iterating context (returns an iterator in Python 3).</Description>
        <HelpText>&lt;p&gt;Used when dict.values is referenced in a non-iterating context (returns an iterator in Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>dict.values referenced when not iterating</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DeM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>deprecated-module</OriginalId>
      <GroupMember>Import Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Deprecated Module</DisplayName>
        <Description>Used a module marked as deprecated is imported.</Description>
        <HelpText>&lt;p&gt;Used a module marked as deprecated is imported.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Uses of a deprecated module %r</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DeSF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>deprecated-sys-function</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Deprecated Sys Function</DisplayName>
        <Description>Used when accessing a field on sys module that has been removed in Python 3.</Description>
        <HelpText>&lt;p&gt;Used when accessing a field on sys module that has been removed in Python 3.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Accessing a removed attribute on the sys module</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DepM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>deprecated-method</OriginalId>
      <GroupMember>Stdlib Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Deprecated Method</DisplayName>
        <Description>The method is marked as deprecated and will be removed in a future version of Python. Consider looking for an alternative in the documentation.</Description>
        <HelpText>&lt;p&gt;The method is marked as deprecated and will be removed in a future version of Python. Consider looking for an alternative in the documentation.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Using deprecated method %s()</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_DiM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>div-method</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Div Method</DisplayName>
        <Description>Used when a __div__ method is defined. Using `__truediv__` and setting__div__ = __truediv__ should be preferred.(method is not used by Python 3).</Description>
        <HelpText>&lt;p&gt;Used when a __div__ method is defined. Using &lt;code&gt;__truediv__&lt;/code&gt; and setting__div__ = __truediv__ should be preferred.(method is not used by Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>__div__ method defined</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_EB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>execfile-builtin</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Execfile Builtin</DisplayName>
        <Description>Used when the execfile built-in function is referenced (missing from Python 3).</Description>
        <HelpText>&lt;p&gt;Used when the execfile built-in function is referenced (missing from Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>execfile built-in referenced</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ED">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>empty-docstring</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Empty Docstring</DisplayName>
        <Description>Used when a module, function, class or method has an empty docstring (it would be too easy ;).</Description>
        <HelpText>&lt;p&gt;Used when a module, function, class or method has an empty docstring (it would be too easy ;).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Empty %s docstring</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_EE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>exception-escape</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Exception Escape</DisplayName>
        <Description>Emitted when using an exception, that was bound in an except handler, outside of the except handler. On Python 3 these exceptions will be deleted once they get out of the except handler.</Description>
        <HelpText>&lt;p&gt;Emitted when using an exception, that was bound in an except handler, outside of the except handler. On Python 3 these exceptions will be deleted once they get out of the except handler.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Using an exception object that was bound by an except handler</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_EMA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>exception-message-attribute</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Exception Message Attribute</DisplayName>
        <Description>Used when the message attribute is accessed on an Exception. Use str(exception) instead.</Description>
        <HelpText>&lt;p&gt;Used when the message attribute is accessed on an Exception. Use str(exception) instead.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Exception.message removed in Python 3</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ENA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>expression-not-assigned</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Expression Not Assigned</DisplayName>
        <Description>Used when an expression that is not a function call is assigned to nothing. Probably something else was intended.</Description>
        <HelpText>&lt;p&gt;Used when an expression that is not a function call is assigned to nothing. Probably something else was intended.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Expression &quot;%s&quot; is assigned to nothing</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_EU">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>eval-used</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Eval Used</DisplayName>
        <Description>Used when you use the &quot;eval&quot; function, to discourage its usage. Consider using `ast.literal_eval` for safely evaluating strings containing Python expressions from untrusted sources.</Description>
        <HelpText>&lt;p&gt;Used when you use the “eval” function, to discourage its usage. Consider using &lt;code&gt;ast.literal_eval&lt;/code&gt; for safely evaluating strings containing Python expressions from untrusted sources.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Use of eval</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_EWH">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>eq-without-hash</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Eq Without Hash</DisplayName>
        <Description>Used when a class implements __eq__ but not __hash__. In Python 2, objects get object.__hash__ as the default implementation, in Python 3 objects get None as their default __hash__ implementation if they also implement __eq__.</Description>
        <HelpText>&lt;p&gt;Used when a class implements __eq__ but not __hash__. In Python 2, objects get object.__hash__ as the default implementation, in Python 3 objects get None as their default __hash__ implementation if they also implement __eq__.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Implementing __eq__ without also implementing __hash__</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ExU">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>exec-used</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Exec Used</DisplayName>
        <Description>Used when you use the &quot;exec&quot; statement (function for Python 3), to discourage its usage. That doesn&apos;t mean you cannot use it!</Description>
        <HelpText>&lt;p&gt;Used when you use the “exec” statement (function for Python 3), to discourage its usage. That doesn’t mean you cannot use it!&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Use of exec</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_F">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>fatal</OriginalId>
      <GroupMember>Pylint Checker Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Fatal</DisplayName>
        <Description>Used when an error occurred preventing the analysis of a module (unable to find it for instance).</Description>
        <HelpText>Used when an error occurred preventing the analysis of a module (unable to find it for instance).</HelpText>
        <WarningText></WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_FB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>file-builtin</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>File Builtin</DisplayName>
        <Description>Used when the file built-in function is referenced (missing from Python 3).</Description>
        <HelpText>&lt;p&gt;Used when the file built-in function is referenced (missing from Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>file built-in referenced</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_FBNI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>filter-builtin-not-iterating</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Filter Builtin Not Iterating</DisplayName>
        <Description>Used when the filter built-in is referenced in a non-iterating context (returns an iterator in Python 3).</Description>
        <HelpText>&lt;p&gt;Used when the filter built-in is referenced in a non-iterating context (returns an iterator in Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>filter built-in referenced when not iterating</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_FCS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>format-combined-specification</OriginalId>
      <GroupMember>String Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Format Combined Specification</DisplayName>
        <Description>Used when a PEP 3101 format string contains both automatic field numbering (e.g. &apos;{}&apos;) and manual field specification (e.g. &apos;{0}&apos;). This message can&apos;t be emitted when using Python &lt; 2.7.</Description>
        <HelpText>&lt;p&gt;Used when a PEP 3101 format string contains both automatic field numbering (e.g. ‘{}’) and manual field specification (e.g. ‘{0}’). This message can’t be emitted when using Python &amp;lt; 2.7.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Format string contains both automatic field numbering and manual field specification</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_FI">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>file-ignored</OriginalId>
      <GroupMember>Pylint Checker Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>File Ignored</DisplayName>
        <Description>Used to inform that the file will not be checked.</Description>
        <HelpText>Used to inform that the file will not be checked.</HelpText>
        <WarningText>Ignoring entire file</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_FNM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>format-needs-mapping</OriginalId>
      <GroupMember>String Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Format Needs Mapping</DisplayName>
        <Description>Used when a format string that uses named conversion specifiers is used with an argument that is not a mapping.</Description>
        <HelpText>&lt;p&gt;Used when a format string that uses named conversion specifiers is used with an argument that is not a mapping.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Expected mapping for format string, not %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_FR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>function-redefined</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Function Redefined</DisplayName>
        <Description>Used when a function / class / method is redefined.</Description>
        <HelpText>&lt;p&gt;Used when a function / class / method is redefined.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>%s already defined line %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_Fi">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>fixme</OriginalId>
      <GroupMember>Miscellaneous Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Fixme</DisplayName>
        <Description>Used when a warning note as FIXME or XXX is detected.</Description>
        <HelpText>&lt;p&gt;Used when a warning note as FIXME or XXX is detected.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText></WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_GAML">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>global-at-module-level</OriginalId>
      <GroupMember>Variable Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Global At Module Level</DisplayName>
        <Description>Used when you use the &quot;global&quot; statement at the module level since it has no effect.</Description>
        <HelpText>&lt;p&gt;Used when you use the “global” statement at the module level since it has no effect.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Using the global statement at the module level</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_GM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>getslice-method</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Getslice Method</DisplayName>
        <Description>Used when a __getslice__ method is defined (method is not used by Python 3).</Description>
        <HelpText>&lt;p&gt;Used when a __getslice__ method is defined (method is not used by Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>__getslice__ method defined</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_GS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>global-statement</OriginalId>
      <GroupMember>Variable Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Global Statement</DisplayName>
        <Description>Used when you use the &quot;global&quot; statement to update a global variable. Pylint just try to discourage this usage. That doesn&apos;t mean you cannot use it!</Description>
        <HelpText>&lt;p&gt;Used when you use the “global” statement to update a global variable. Pylint just try to discourage this usage. That doesn’t mean you cannot use it!&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Using the global statement</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_GVNA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>global-variable-not-assigned</OriginalId>
      <GroupMember>Variable Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Global Variable Not Assigned</DisplayName>
        <Description>Used when a variable is defined through the &quot;global&quot; statement but no assignment to this variable is done.</Description>
        <HelpText>&lt;p&gt;Used when a variable is defined through the “global” statement but no assignment to this variable is done.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Using global for %r but no assignment is done</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_GVU">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>global-variable-undefined</OriginalId>
      <GroupMember>Variable Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Global Variable Undefined</DisplayName>
        <Description>Used when a variable is defined through the &quot;global&quot; statement but the variable is not defined in the module scope.</Description>
        <HelpText>&lt;p&gt;Used when a variable is defined through the “global” statement but the variable is not defined in the module scope.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Global variable %r undefined at the module level</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_HM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>hex-method</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Hex Method</DisplayName>
        <Description>Used when a __hex__ method is defined (method is not used by Python 3).</Description>
        <HelpText>&lt;p&gt;Used when a __hex__ method is defined (method is not used by Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>__hex__ method defined</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_IAO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>invalid-all-object</OriginalId>
      <GroupMember>Variable Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid All Object</DisplayName>
        <Description>Used when an invalid (non-string) object occurs in __all__.</Description>
        <HelpText>&lt;p&gt;Used when an invalid (non-string) object occurs in __all__.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Invalid object %r in __all__, must contain only strings</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_IB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>input-builtin</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Input Builtin</DisplayName>
        <Description>Used when the input built-in is referenced (backwards-incompatible semantics in Python 3).</Description>
        <HelpText>&lt;p&gt;Used when the input built-in is referenced (backwards-incompatible semantics in Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>input built-in referenced</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ICID">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>invalid-characters-in-docstring</OriginalId>
      <GroupMember>Spelling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Characters In Docstring</DisplayName>
        <Description>Used when a word in docstring cannot be checked by enchant.</Description>
        <HelpText>&lt;p&gt;Used when a word in docstring cannot be checked by enchant.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Invalid characters %r in a docstring</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_IE">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>import-error</OriginalId>
      <GroupMember>Import Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Import Error</DisplayName>
        <Description>Used when pylint has been unable to import a module.</Description>
        <HelpText>Used when pylint has been unable to import a module.</HelpText>
        <WarningText>Unable to import %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_IED">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>invalid-encoded-data</OriginalId>
      <GroupMember>Miscellaneous Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Encoded Data</DisplayName>
        <Description>Used when a source line cannot be decoded using the specified source file encoding. This message can&apos;t be emitted when using Python &gt;= 3.0.</Description>
        <HelpText>&lt;p&gt;Used when a source line cannot be decoded using the specified source file encoding. This message can’t be emitted when using Python &amp;gt;= 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Cannot decode using encoding &quot;%s&quot;, unexpected byte at position %d</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_IFI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>invalid-format-index</OriginalId>
      <GroupMember>String Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Format Index</DisplayName>
        <Description>Used when a PEP 3101 format string uses a lookup specifier ({a[1]}), but the argument passed for formatting doesn&apos;t contain or doesn&apos;t have that key as an attribute. This message can&apos;t be emitted when using Python &lt; 2.7.</Description>
        <HelpText>&lt;p&gt;Used when a PEP 3101 format string uses a lookup specifier ({a[1]}), but the argument passed for formatting doesn’t contain or doesn’t have that key as an attribute. This message can’t be emitted when using Python &amp;lt; 2.7.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Using invalid lookup key %r in format specifier %r</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_IIG">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>init-is-generator</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Init Is Generator</DisplayName>
        <Description>Used when the special class method __init__ is turned into a generator by a yield in its body.</Description>
        <HelpText>&lt;p&gt;Used when the special class method __init__ is turned into a generator by a yield in its body.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>__init__ method is a generator</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ILR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>invalid-length-returned</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Length Returned</DisplayName>
        <Description>Used when an __len__ method returns something which is not a non-negative integer.</Description>
        <HelpText>&lt;p&gt;Used when an __len__ method returns something which is not a non-negative integer.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>__len__ does not return non-negative integer</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_IM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>inconsistent-mro</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Inconsistent Mro</DisplayName>
        <Description>Used when a class has an inconsistent method resolution order.</Description>
        <HelpText>&lt;p&gt;Used when a class has an inconsistent method resolution order.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Inconsistent method resolution order for class %r</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_IN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>invalid-name</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Name</DisplayName>
        <Description>Used when the name doesn&apos;t conform to naming rules associated to its type (constant, variable, class...).</Description>
        <HelpText>&lt;p&gt;Used when the name doesn’t conform to naming rules associated to its type (constant, variable, class…).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>%s name &quot;%s&quot; doesn&apos;t conform to %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_INC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>inherit-non-class</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Inherit Non Class</DisplayName>
        <Description>Used when a class inherits from something which is not a class.</Description>
        <HelpText>&lt;p&gt;Used when a class inherits from something which is not a class.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Inheriting %r, which is not a class.</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_IRS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>inconsistent-return-statements</OriginalId>
      <GroupMember>Refactoring Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Inconsistent Return Statements</DisplayName>
        <Description>According to PEP8, if any return statement returns an expression, any return statements where no value is returned should explicitly state this as return None, and an explicit return statement should be present at the end of the function (if reachable).</Description>
        <HelpText>&lt;p&gt;According to PEP8, if any return statement returns an expression, any return statements where no value is returned should explicitly state this as return None, and an explicit return statement should be present at the end of the function (if reachable).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Either all return statements in a function should return an expression, or none of them should.</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_IS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>import-self</OriginalId>
      <GroupMember>Import Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Import Self</DisplayName>
        <Description>Used when a module is importing itself.</Description>
        <HelpText>&lt;p&gt;Used when a module is importing itself.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Module import itself</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ISAT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>invalid-star-assignment-target</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Star Assignment Target</DisplayName>
        <Description>Emitted when a star expression is used as a starred assignment target. This message can&apos;t be emitted when using Python &lt; 3.0.</Description>
        <HelpText>&lt;p&gt;Emitted when a star expression is used as a starred assignment target. This message can’t be emitted when using Python &amp;lt; 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Starred assignment target must be in a list or tuple</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ISC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>invalid-str-codec</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Str Codec</DisplayName>
        <Description>Used when using str.encode or str.decode with a non-text encoding. Use codecs module to handle arbitrary codecs.</Description>
        <HelpText>&lt;p&gt;Used when using str.encode or str.decode with a non-text encoding. Use codecs module to handle arbitrary codecs.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>non-text encoding used in str.decode</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ISI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>invalid-sequence-index</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Sequence Index</DisplayName>
        <Description>Used when a sequence type is indexed with an invalid type. Valid types are ints, slices, and objects with an __index__ method.</Description>
        <HelpText>&lt;p&gt;Used when a sequence type is indexed with an invalid type. Valid types are ints, slices, and objects with an __index__ method.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Sequence index is not an int, slice, or instance with __index__</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ISML">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>import-star-module-level</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Import Star Module Level</DisplayName>
        <Description>Used when the import star syntax is used somewhere else than the module level. This message can&apos;t be emitted when using Python &gt;= 3.0.</Description>
        <HelpText>&lt;p&gt;Used when the import star syntax is used somewhere else than the module level. This message can’t be emitted when using Python &amp;gt;= 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Import * only allowed at module level</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ISO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>invalid-slots-object</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Slots Object</DisplayName>
        <Description>Used when an invalid (non-string) object occurs in __slots__.</Description>
        <HelpText>&lt;p&gt;Used when an invalid (non-string) object occurs in __slots__.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Invalid object %r in __slots__, must contain only non empty strings</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_IUL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>invalid-unicode-literal</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Unicode Literal</DisplayName>
        <Description>Used when raw unicode literals are found in a program. They are no longer supported in Python 3. This message can&apos;t be emitted when using Python &gt;= 3.0.</Description>
        <HelpText>&lt;p&gt;Used when raw unicode literals are found in a program. They are no longer supported in Python 3. This message can’t be emitted when using Python &amp;gt;= 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>unicode raw string literals not supported in 3.x</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_IUOT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>invalid-unary-operand-type</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Unary Operand Type</DisplayName>
        <Description>Emitted when a unary operand is used on an object which does not support this type of operation.</Description>
        <HelpText>&lt;p&gt;Emitted when a unary operand is used on an object which does not support this type of operation.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText></WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_IdM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>idiv-method</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Idiv Method</DisplayName>
        <Description>Used when an __idiv__ method is defined. Using `__itruediv__` and setting__idiv__ = __itruediv__ should be preferred.(method is not used by Python 3).</Description>
        <HelpText>&lt;p&gt;Used when an __idiv__ method is defined. Using &lt;code&gt;__itruediv__&lt;/code&gt; and setting__idiv__ = __itruediv__ should be preferred.(method is not used by Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>__idiv__ method defined</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_InB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>intern-builtin</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Intern Builtin</DisplayName>
        <Description>Used when the intern built-in is referenced (Moved to sys.intern in Python 3).</Description>
        <HelpText>&lt;p&gt;Used when the intern built-in is referenced (Moved to sys.intern in Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>intern built-in referenced</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_InE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>indexing-exception</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Indexing Exception</DisplayName>
        <Description>Indexing exceptions will not work on Python 3. Use `exception.args[index]` instead.</Description>
        <HelpText>&lt;p&gt;Indexing exceptions will not work on Python 3. Use &lt;code&gt;exception.args[index]&lt;/code&gt; instead.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Indexing exceptions will not work on Python 3</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_InM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>invalid-metaclass</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Metaclass</DisplayName>
        <Description>Emitted whenever we can detect that a class is using, as a metaclass, something which might be invalid for using as a metaclass.</Description>
        <HelpText>&lt;p&gt;Emitted whenever we can detect that a class is using, as a metaclass, something which might be invalid for using as a metaclass.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Invalid metaclass %r used</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_InS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>invalid-slots</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Slots</DisplayName>
        <Description>Used when an invalid __slots__ is found in class. Only a string, an iterable or a sequence is permitted.</Description>
        <HelpText>&lt;p&gt;Used when an invalid __slots__ is found in class. Only a string, an iterable or a sequence is permitted.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Invalid __slots__ object</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_InSI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>invalid-slice-index</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Slice Index</DisplayName>
        <Description>Used when a slice index is not an integer, None, or an object with an __index__ method.</Description>
        <HelpText>&lt;p&gt;Used when a slice index is not an integer, None, or an object with an __index__ method.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Slice index is not an int, None, or instance with __index__</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_KABV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>keyword-arg-before-vararg</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Keyword Arg Before Vararg</DisplayName>
        <Description>When defining a keyword argument before variable positional arguments, one can end up in having multiple values passed for the aforementioned parameter in case the method is called with keyword arguments.</Description>
        <HelpText>&lt;p&gt;When defining a keyword argument before variable positional arguments, one can end up in having multiple values passed for the aforementioned parameter in case the method is called with keyword arguments.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Keyword argument before variable positional arguments list in the definition of %s function</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_LAC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>len-as-condition</OriginalId>
      <GroupMember>Len Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Len As Condition</DisplayName>
        <Description>Used when Pylint detects that len(sequence) is being used inside a condition to determine if a sequence is empty. Instead of comparing the length to 0, rely on the fact that empty sequences are false.</Description>
        <HelpText>&lt;p&gt;Used when Pylint detects that len(sequence) is being used inside a condition to determine if a sequence is empty. Instead of comparing the length to 0, rely on the fact that empty sequences are false.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Do not use `len(SEQUENCE)` to determine if a sequence is empty</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_LB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>long-builtin</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Long Builtin</DisplayName>
        <Description>Used when the long built-in function is referenced (missing from Python 3).</Description>
        <HelpText>&lt;p&gt;Used when the long built-in function is referenced (missing from Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>long built-in referenced</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_LC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>literal-comparison</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Literal Comparison</DisplayName>
        <Description>Used when comparing an object to a literal, which is usually what you do not want to do, since you can compare to a different literal than what was expected altogether.</Description>
        <HelpText>&lt;p&gt;Used when comparing an object to a literal, which is usually what you do not want to do, since you can compare to a different literal than what was expected altogether.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Comparison to literal</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_LD">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>locally-disabled</OriginalId>
      <GroupMember>Pylint Checker Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Locally Disabled</DisplayName>
        <Description>Used when an inline option disables a message or a messages category.</Description>
        <HelpText>Used when an inline option disables a message or a messages category.</HelpText>
        <WarningText>Locally disabling %s (%s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_LE">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>locally-enabled</OriginalId>
      <GroupMember>Pylint Checker Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Locally Enabled</DisplayName>
        <Description>Used when an inline option enables a message or a messages category.</Description>
        <HelpText>Used when an inline option enables a message or a messages category.</HelpText>
        <WarningText>Locally enabling %s (%s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_LFI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>logging-format-interpolation</OriginalId>
      <GroupMember>Logging Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Logging Format Interpolation</DisplayName>
        <Description>Used when a logging statement has a call form of &quot;logging.&lt;logging method&gt;(format_string.format(format_args...))&quot;. Such calls should use % formatting instead, but leave interpolation to the logging function by passing the parameters as arguments.</Description>
        <HelpText>&lt;p&gt;Used when a logging statement has a call form of “logging.&amp;lt;logging method&amp;gt;(format_string.format(format_args…))”. Such calls should use % formatting instead, but leave interpolation to the logging function by passing the parameters as arguments.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Use % formatting in logging functions and pass the % parameters as arguments</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_LFT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>logging-format-truncated</OriginalId>
      <GroupMember>Logging Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Logging Format Truncated</DisplayName>
        <Description>Used when a logging statement format string terminates before the end of a conversion specifier.</Description>
        <HelpText>&lt;p&gt;Used when a logging statement format string terminates before the end of a conversion specifier.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Logging format string ends in middle of conversion specifier</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_LLS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>lowercase-l-suffix</OriginalId>
      <GroupMember>Format Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Lowercase L Suffix</DisplayName>
        <Description>Used when a lower case &quot;l&quot; is used to mark a long integer. You should use a upper case &quot;L&quot; since the letter &quot;l&quot; looks too much like the digit &quot;1&quot;. This message can&apos;t be emitted when using Python &gt;= 3.0.</Description>
        <HelpText>&lt;p&gt;Used when a lower case “l” is used to mark a long integer. You should use a upper case “L” since the letter “l” looks too much like the digit “1”. This message can’t be emitted when using Python &amp;gt;= 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Use of &quot;l&quot; as long integer identifier</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_LNL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>logging-not-lazy</OriginalId>
      <GroupMember>Logging Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Logging Not Lazy</DisplayName>
        <Description>Used when a logging statement has a call form of &quot;logging.&lt;logging method&gt;(format_string % (format_args...))&quot;. Such calls should leave string interpolation to the logging method itself and be written &quot;logging.&lt;logging method&gt;(format_string, format_args...)&quot; so that the program may avoid incurring the cost of the interpolation in those cases in which no message will be logged. For more, see http://www.python.org/dev/peps/pep-0282/.</Description>
        <HelpText>&lt;p&gt;Used when a logging statement has a call form of “logging.&amp;lt;logging method&amp;gt;(format_string % (format_args…))”. Such calls should leave string interpolation to the logging method itself and be written “logging.&amp;lt;logging method&amp;gt;(format_string, format_args…)” so that the program may avoid incurring the cost of the interpolation in those cases in which no message will be logged. For more, see &lt;a href=&quot;http://www.python.org/dev/peps/pep-0282/&quot; class=&quot;uri&quot;&gt;http://www.python.org/dev/peps/pep-0282/&lt;/a&gt;.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Specify string format arguments as logging function parameters</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_LS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>long-suffix</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Long Suffix</DisplayName>
        <Description>Used when &quot;l&quot; or &quot;L&quot; is used to mark a long integer. This will not work in Python 3, since `int` and `long` types have merged. This message can&apos;t be emitted when using Python &gt;= 3.0.</Description>
        <HelpText>&lt;p&gt;Used when “l” or “L” is used to mark a long integer. This will not work in Python 3, since &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;long&lt;/code&gt; types have merged. This message can’t be emitted when using Python &amp;gt;= 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Use of long suffix</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_LTFA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>logging-too-few-args</OriginalId>
      <GroupMember>Logging Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Logging Too Few Args</DisplayName>
        <Description>Used when a logging format string is given too few arguments.</Description>
        <HelpText>&lt;p&gt;Used when a logging format string is given too few arguments.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Not enough arguments for logging format string</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_LTL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>line-too-long</OriginalId>
      <GroupMember>Format Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Line Too Long</DisplayName>
        <Description>Used when a line is longer than a given number of characters.</Description>
        <HelpText>&lt;p&gt;Used when a line is longer than a given number of characters.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Line too long (%s/%s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_LTMA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>logging-too-many-args</OriginalId>
      <GroupMember>Logging Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Logging Too Many Args</DisplayName>
        <Description>Used when a logging format string is given too many arguments.</Description>
        <HelpText>&lt;p&gt;Used when a logging format string is given too many arguments.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Too many arguments for logging format string</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_LUF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>logging-unsupported-format</OriginalId>
      <GroupMember>Logging Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Logging Unsupported Format</DisplayName>
        <Description>Used when an unsupported format character is used in a logging statement format string.</Description>
        <HelpText>&lt;p&gt;Used when an unsupported format character is used in a logging statement format string.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Unsupported logging format character %r (%#02x) at index %d</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_LoE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>lost-exception</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Lost Exception</DisplayName>
        <Description>Used when a break or a return statement is found inside the finally clause of a try...finally block: the exceptions raised in the try clause will be silently swallowed instead of being re-raised.</Description>
        <HelpText>&lt;p&gt;Used when a break or a return statement is found inside the finally clause of a try…finally block: the exceptions raised in the try clause will be silently swallowed instead of being re-raised.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>%s statement in finally block may swallow exception</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_MA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>metaclass-assignment</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Metaclass Assignment</DisplayName>
        <Description>Used when a metaclass is specified by assigning to __metaclass__ (Python 3 specifies the metaclass as a class statement argument).</Description>
        <HelpText>&lt;p&gt;Used when a metaclass is specified by assigning to __metaclass__ (Python 3 specifies the metaclass as a class statement argument).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Assigning to a class&apos;s __metaclass__ attribute</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_MBNI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>map-builtin-not-iterating</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Map Builtin Not Iterating</DisplayName>
        <Description>Used when the map built-in is referenced in a non-iterating context (returns an iterator in Python 3).</Description>
        <HelpText>&lt;p&gt;Used when the map built-in is referenced in a non-iterating context (returns an iterator in Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>map built-in referenced when not iterating</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_MBR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>misplaced-bare-raise</OriginalId>
      <GroupMember>Exception Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Misplaced Bare Raise</DisplayName>
        <Description>Used when a bare raise is not used inside an except clause. This generates an error, since there are no active exceptions to be reraised. An exception to this rule is represented by a bare raise inside a finally clause, which might work, as long as an exception is raised inside the try block, but it is nevertheless a code smell that must not be relied upon.</Description>
        <HelpText>&lt;p&gt;Used when a bare raise is not used inside an except clause. This generates an error, since there are no active exceptions to be reraised. An exception to this rule is represented by a bare raise inside a finally clause, which might work, as long as an exception is raised inside the try block, but it is nevertheless a code smell that must not be relied upon.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>The raise statement is not inside an except clause</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_MCC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>misplaced-comparison-constant</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Misplaced Comparison Constant</DisplayName>
        <Description>Used when the constant is placed on the left side of a comparison. It is usually clearer in intent to place it in the right hand side of the comparison.</Description>
        <HelpText>&lt;p&gt;Used when the constant is placed on the left side of a comparison. It is usually clearer in intent to place it in the right hand side of the comparison.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Comparison should be %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_MCF">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>method-check-failed</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Method Check Failed</DisplayName>
        <Description>Used when Pylint has been unable to check methods signature compatibility for an unexpected reason. Please report this kind if you don&apos;t make sense of it.</Description>
        <HelpText>Used when Pylint has been unable to check methods signature compatibility for an unexpected reason. Please report this kind if you don&apos;t make sense of it.</HelpText>
        <WarningText>Unable to check methods signature (%s / %s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_MD">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>missing-docstring</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Missing Docstring</DisplayName>
        <Description>Used when a module, function, class or method has no docstring.Some special methods like __init__ doesn&apos;t necessary require a docstring.</Description>
        <HelpText>&lt;p&gt;Used when a module, function, class or method has no docstring.Some special methods like __init__ doesn’t necessary require a docstring.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Missing %s docstring</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_MF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>misplaced-future</OriginalId>
      <GroupMember>Import Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Misplaced Future</DisplayName>
        <Description>Python 2.5 and greater require __future__ import to be the first non docstring statement in the module.</Description>
        <HelpText>&lt;p&gt;Python 2.5 and greater require __future__ import to be the first non docstring statement in the module.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>__future__ import is not the first non docstring statement</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_MFA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>missing-format-attribute</OriginalId>
      <GroupMember>String Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Missing Format Attribute</DisplayName>
        <Description>Used when a PEP 3101 format string uses an attribute specifier ({0.length}), but the argument passed for formatting doesn&apos;t have that attribute. This message can&apos;t be emitted when using Python &lt; 2.7.</Description>
        <HelpText>&lt;p&gt;Used when a PEP 3101 format string uses an attribute specifier ({0.length}), but the argument passed for formatting doesn’t have that attribute. This message can’t be emitted when using Python &amp;lt; 2.7.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Missing format attribute %r in format specifier %r</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_MFAK">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>missing-format-argument-key</OriginalId>
      <GroupMember>String Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Missing Format Argument Key</DisplayName>
        <Description>Used when a PEP 3101 format string that uses named fields doesn&apos;t receive one or more required keywords. This message can&apos;t be emitted when using Python &lt; 2.7.</Description>
        <HelpText>&lt;p&gt;Used when a PEP 3101 format string that uses named fields doesn’t receive one or more required keywords. This message can’t be emitted when using Python &amp;lt; 2.7.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Missing keyword argument %r for format string</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_MFN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>missing-final-newline</OriginalId>
      <GroupMember>Format Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Missing Final Newline</DisplayName>
        <Description>Used when the last line in a file is missing a newline.</Description>
        <HelpText>&lt;p&gt;Used when the last line in a file is missing a newline.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Final newline missing</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_MFS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>mixed-format-string</OriginalId>
      <GroupMember>String Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Mixed Format String</DisplayName>
        <Description>Used when a format string contains both named (e.g. &apos;%(foo)d&apos;) and unnamed (e.g. &apos;%d&apos;) conversion specifiers. This is also used when a named conversion specifier contains * for the minimum field width and/or precision.</Description>
        <HelpText>&lt;p&gt;Used when a format string contains both named (e.g. ‘%(foo)d’) and unnamed (e.g. ‘%d’) conversion specifiers. This is also used when a named conversion specifier contains * for the minimum field width and/or precision.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Mixing named and unnamed conversion specifiers in format string</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_MFSK">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>missing-format-string-key</OriginalId>
      <GroupMember>String Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Missing Format String Key</DisplayName>
        <Description>Used when a format string that uses named conversion specifiers is used with a dictionary that doesn&apos;t contain all the keys required by the format string.</Description>
        <HelpText>&lt;p&gt;Used when a format string that uses named conversion specifiers is used with a dictionary that doesn’t contain all the keys required by the format string.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Missing key %r in format string dictionary</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_MH">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>method-hidden</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Method Hidden</DisplayName>
        <Description>Used when a class defines a method which is hidden by an instance attribute from an ancestor class or set by some client code.</Description>
        <HelpText>&lt;p&gt;Used when a class defines a method which is hidden by an instance attribute from an ancestor class or set by some client code.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>An attribute defined in %s line %s hides this method</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_MI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>mixed-indentation</OriginalId>
      <GroupMember>Format Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Mixed Indentation</DisplayName>
        <Description>Used when there are some mixed tabs and spaces in a module.</Description>
        <HelpText>&lt;p&gt;Used when there are some mixed tabs and spaces in a module.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Found indentation with %ss instead of %ss</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_MK">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>missing-kwoa</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Missing Kwoa</DisplayName>
        <Description>Used when a function call does not pass a mandatory keyword-only argument. This message can&apos;t be emitted when using Python &lt; 3.0.</Description>
        <HelpText>&lt;p&gt;Used when a function call does not pass a mandatory keyword-only argument. This message can’t be emitted when using Python &amp;lt; 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Missing mandatory keyword argument %r in %s call</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_MLE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>mixed-line-endings</OriginalId>
      <GroupMember>Format Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Mixed Line Endings</DisplayName>
        <Description>Used when there are mixed (LF and CRLF) newline signs in a file.</Description>
        <HelpText>&lt;p&gt;Used when there are mixed (LF and CRLF) newline signs in a file.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Mixed line endings LF and CRLF</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_MS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>multiple-statements</OriginalId>
      <GroupMember>Format Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Multiple Statements</DisplayName>
        <Description>Used when more than on statement are found on the same line.</Description>
        <HelpText>&lt;p&gt;Used when more than on statement are found on the same line.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>More than one statement on a single line</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_MSA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>missing-super-argument</OriginalId>
      <GroupMember>Newstyle Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Missing Super Argument</DisplayName>
        <Description>Used when the super builtin didn&apos;t receive an argument. This message can&apos;t be emitted when using Python &gt;= 3.0.</Description>
        <HelpText>&lt;p&gt;Used when the super builtin didn’t receive an argument. This message can’t be emitted when using Python &amp;gt;= 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Missing argument to super()</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_MuI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>multiple-imports</OriginalId>
      <GroupMember>Import Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Multiple Imports</DisplayName>
        <Description>Used when import statement importing multiple modules is detected.</Description>
        <HelpText>&lt;p&gt;Used when import statement importing multiple modules is detected.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Multiple imports on one line (%s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NABL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>non-ascii-bytes-literal</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Non Ascii Bytes Literal</DisplayName>
        <Description>Used when non-ascii bytes literals are found in a program. They are no longer supported in Python 3. This message can&apos;t be emitted when using Python &gt;= 3.0.</Description>
        <HelpText>&lt;p&gt;Used when non-ascii bytes literals are found in a program. They are no longer supported in Python 3. This message can’t be emitted when using Python &amp;gt;= 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Non-ascii bytes literals not supported in 3.x</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NACM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>not-async-context-manager</OriginalId>
      <GroupMember>Async Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Not Async Context Manager</DisplayName>
        <Description>Used when an async context manager is used with an object that does not implement the async context management protocol. This message can&apos;t be emitted when using Python &lt; 3.5.</Description>
        <HelpText>&lt;p&gt;Used when an async context manager is used with an object that does not implement the async context management protocol. This message can’t be emitted when using Python &amp;lt; 3.5.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Async context manager &apos;%s&apos; doesn&apos;t implement __aenter__ and __aexit__.</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NAG">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>nonlocal-and-global</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Nonlocal And Global</DisplayName>
        <Description>Emitted when a name is both nonlocal and global. This message can&apos;t be emitted when using Python &lt; 3.0.</Description>
        <HelpText>&lt;p&gt;Emitted when a name is both nonlocal and global. This message can’t be emitted when using Python &amp;lt; 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Name %r is nonlocal and global</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NAI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>no-absolute-import</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>No Absolute Import</DisplayName>
        <Description>Used when an import is not accompanied by ``from __future__ import absolute_import`` (default behaviour in Python 3).</Description>
        <HelpText>&lt;p&gt;Used when an import is not accompanied by &lt;code&gt;from __future__ import absolute_import&lt;/code&gt; (default behaviour in Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>import missing `from __future__ import absolute_import`</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NAM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>not-a-mapping</OriginalId>
      <GroupMember>Iterable Check Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Not A Mapping</DisplayName>
        <Description>Used when a non-mapping value is used in place where mapping is expected.</Description>
        <HelpText>&lt;p&gt;Used when a non-mapping value is used in place where mapping is expected.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Non-mapping value %s is used in a mapping context</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>not-callable</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Not Callable</DisplayName>
        <Description>Used when an object being called has been inferred to a non callable object.</Description>
        <HelpText>&lt;p&gt;Used when an object being called has been inferred to a non callable object.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>%s is not callable</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NCD">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>no-classmethod-decorator</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>No Classmethod Decorator</DisplayName>
        <Description>Used when a class method is defined without using the decorator syntax.</Description>
        <HelpText>&lt;p&gt;Used when a class method is defined without using the decorator syntax.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Consider using a decorator instead of calling classmethod</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NCM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>not-context-manager</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Not Context Manager</DisplayName>
        <Description>Used when an instance in a with statement doesn&apos;t implement the context manager protocol(__enter__/__exit__).</Description>
        <HelpText>&lt;p&gt;Used when an instance in a with statement doesn’t implement the context manager protocol(__enter__/__exit__).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Context manager &apos;%s&apos; doesn&apos;t implement __enter__ and __exit__.</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>nonstandard-exception</OriginalId>
      <GroupMember>Exception Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Nonstandard Exception</DisplayName>
        <Description>Used when a custom exception class is raised but doesn&apos;t inherit from the builtin &quot;Exception&quot; class. This message can&apos;t be emitted when using Python &gt;= 3.0.</Description>
        <HelpText>&lt;p&gt;Used when a custom exception class is raised but doesn’t inherit from the builtin “Exception” class. This message can’t be emitted when using Python &amp;gt;= 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Exception doesn&apos;t inherit from standard &quot;Exception&quot; class</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NER">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>no-else-return</OriginalId>
      <GroupMember>Refactoring Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>No Else Return</DisplayName>
        <Description>Used in order to highlight an unnecessary block of code following an if containing a return statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a return statement.</Description>
        <HelpText>&lt;p&gt;Used in order to highlight an unnecessary block of code following an if containing a return statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a return statement.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Unnecessary &quot;else&quot; after &quot;return&quot;</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>no-init</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>No Init</DisplayName>
        <Description>Used when a class has no __init__ method, neither its parent classes.</Description>
        <HelpText>&lt;p&gt;Used when a class has no __init__ method, neither its parent classes.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Class has no __init__ method</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NIL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>not-in-loop</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Not In Loop</DisplayName>
        <Description>Used when break or continue keywords are used outside a loop.</Description>
        <HelpText>&lt;p&gt;Used when break or continue keywords are used outside a loop.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>%r not properly in loop</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NIR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>non-iterator-returned</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Non Iterator Returned</DisplayName>
        <Description>Used when an __iter__ method returns something which is not an iterable (i.e. has no `__next__` method).</Description>
        <HelpText>&lt;p&gt;Used when an __iter__ method returns something which is not an iterable (i.e. has no &lt;code&gt;__next__&lt;/code&gt; method).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>__iter__ returns non-iterator</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>no-member</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>No Member</DisplayName>
        <Description>Used when a variable is accessed for an unexistent member.</Description>
        <HelpText>&lt;p&gt;Used when a variable is accessed for an unexistent member.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>%s %r has no %r member%s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NMA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>no-method-argument</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>No Method Argument</DisplayName>
        <Description>Used when a method which should have the bound instance as first argument has no argument defined.</Description>
        <HelpText>&lt;p&gt;Used when a method which should have the bound instance as first argument has no argument defined.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Method has no argument</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NMC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>next-method-called</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Next Method Called</DisplayName>
        <Description>Used when an object&apos;s next() method is called (Python 3 uses the next() built-in function).</Description>
        <HelpText>&lt;p&gt;Used when an object’s next() method is called (Python 3 uses the next() built-in function).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Called a next() method on an object</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NMD">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>next-method-defined</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Next Method Defined</DisplayName>
        <Description>Used when a next method is defined that would be an iterator in Python 2 but is treated as a normal function in Python 3.</Description>
        <HelpText>&lt;p&gt;Used when a next method is defined that would be an iterator in Python 2 but is treated as a normal function in Python 3.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>next method defined</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NNIM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>no-name-in-module</OriginalId>
      <GroupMember>Variable Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>No Name In Module</DisplayName>
        <Description>Used when a name cannot be found in a module.</Description>
        <HelpText>&lt;p&gt;Used when a name cannot be found in a module.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>No name %r in module %r</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>nonexistent-operator</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Nonexistent Operator</DisplayName>
        <Description>Used when you attempt to use the C-style pre-increment orpre-decrement operator -- and ++, which doesn&apos;t exist in Python.</Description>
        <HelpText>&lt;p&gt;Used when you attempt to use the C-style pre-increment orpre-decrement operator -- and ++, which doesn’t exist in Python.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Use of the non-existent %s operator</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NPIC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>non-parent-init-called</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Non Parent Init Called</DisplayName>
        <Description>Used when an __init__ method is called on a class which is not in the direct ancestors for the analysed class.</Description>
        <HelpText>&lt;p&gt;Used when an __init__ method is called on a class which is not in the direct ancestors for the analysed class.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>__init__ method from a non direct base class %r is called</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>notimplemented-raised</OriginalId>
      <GroupMember>Exception Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Notimplemented Raised</DisplayName>
        <Description>Used when NotImplemented is raised instead of NotImplementedError.</Description>
        <HelpText>&lt;p&gt;Used when NotImplemented is raised instead of NotImplementedError.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>NotImplemented raised - should raise NotImplementedError</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NSA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>no-self-argument</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>No Self Argument</DisplayName>
        <Description>Used when a method has an attribute different the &quot;self&quot; as first argument. This is considered as an error since this is a so common convention that you shouldn&apos;t break it!</Description>
        <HelpText>&lt;p&gt;Used when a method has an attribute different the “self” as first argument. This is considered as an error since this is a so common convention that you shouldn’t break it!&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Method should have &quot;self&quot; as first argument</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NSD">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>no-staticmethod-decorator</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>No Staticmethod Decorator</DisplayName>
        <Description>Used when a static method is defined without using the decorator syntax.</Description>
        <HelpText>&lt;p&gt;Used when a static method is defined without using the decorator syntax.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Consider using a decorator instead of calling staticmethod</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NSU">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>no-self-use</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>No Self Use</DisplayName>
        <Description>Used when a method doesn&apos;t use its bound instance, and so could be written as a function.</Description>
        <HelpText>&lt;p&gt;Used when a method doesn’t use its bound instance, and so could be written as a function.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Method could be a function</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NVFP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>no-value-for-parameter</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>No Value For Parameter</DisplayName>
        <Description>Used when a function call passes too few arguments.</Description>
        <HelpText>&lt;p&gt;Used when a function call passes too few arguments.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>No value for argument %s in %s call</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NWB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>nonlocal-without-binding</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Nonlocal Without Binding</DisplayName>
        <Description>Emitted when a nonlocal variable does not have an attached name somewhere in the parent scopes. This message can&apos;t be emitted when using Python &lt; 3.0.</Description>
        <HelpText>&lt;p&gt;Emitted when a nonlocal variable does not have an attached name somewhere in the parent scopes. This message can’t be emitted when using Python &amp;lt; 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>nonlocal name %s found without binding</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NoAI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>not-an-iterable</OriginalId>
      <GroupMember>Iterable Check Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Not An Iterable</DisplayName>
        <Description>Used when a non-iterable value is used in place where iterable is expected.</Description>
        <HelpText>&lt;p&gt;Used when a non-iterable value is used in place where iterable is expected.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Non-iterable value %s is used in an iterating context</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_NoM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>nonzero-method</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Nonzero Method</DisplayName>
        <Description>Used when a __nonzero__ method is defined (method is not used by Python 3).</Description>
        <HelpText>&lt;p&gt;Used when a __nonzero__ method is defined (method is not used by Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>__nonzero__ method defined</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_OD">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>old-division</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Old Division</DisplayName>
        <Description>Used for non-floor division w/o a float literal or ``from __future__ import division`` (Python 3 returns a float for int division unconditionally).</Description>
        <HelpText>&lt;p&gt;Used for non-floor division w/o a float literal or &lt;code&gt;from __future__ import division&lt;/code&gt; (Python 3 returns a float for int division unconditionally).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>division w/o __future__ statement</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_OM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>oct-method</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Oct Method</DisplayName>
        <Description>Used when an __oct__ method is defined (method is not used by Python 3).</Description>
        <HelpText>&lt;p&gt;Used when an __oct__ method is defined (method is not used by Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>__oct__ method defined</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ONO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>old-ne-operator</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Old Ne Operator</DisplayName>
        <Description>Used when the deprecated &quot;&lt;&gt;&quot; operator is used instead of &quot;!=&quot;. This is removed in Python 3. This message can&apos;t be emitted when using Python &gt;= 3.0.</Description>
        <HelpText>&lt;p&gt;Used when the deprecated “&amp;lt;&amp;gt;” operator is used instead of “!=”. This is removed in Python 3. This message can’t be emitted when using Python &amp;gt;= 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Use of the &lt;&gt; operator</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_OOL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>old-octal-literal</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Old Octal Literal</DisplayName>
        <Description>Used when encountering the old octal syntax, removed in Python 3. To use the new syntax, prepend 0o on the number. This message can&apos;t be emitted when using Python &gt;= 3.0.</Description>
        <HelpText>&lt;p&gt;Used when encountering the old octal syntax, removed in Python 3. To use the new syntax, prepend 0o on the number. This message can’t be emitted when using Python &amp;gt;= 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Use of old octal literal</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ORS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>old-raise-syntax</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Old Raise Syntax</DisplayName>
        <Description>Used when the alternate raise syntax &apos;raise foo, bar&apos; is used instead of &apos;raise foo(bar)&apos;.</Description>
        <HelpText>&lt;p&gt;Used when the alternate raise syntax ‘raise foo, bar’ is used instead of ‘raise foo(bar)’.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Use raise ErrorClass(args) instead of raise ErrorClass, args.</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_OSC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>old-style-class</OriginalId>
      <GroupMember>Newstyle Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Old Style Class</DisplayName>
        <Description>Used when a class is defined that does not inherit from another class and does not inherit explicitly from &quot;object&quot;. This message can&apos;t be emitted when using Python &gt;= 3.0.</Description>
        <HelpText>&lt;p&gt;Used when a class is defined that does not inherit from another class and does not inherit explicitly from “object”. This message can’t be emitted when using Python &amp;gt;= 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Old-style class defined.</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_PA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>protected-access</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Protected Access</DisplayName>
        <Description>Used when a protected member (i.e. class member with a name beginning with an underscore) is access outside the class or a descendant of the class where it&apos;s defined.</Description>
        <HelpText>&lt;p&gt;Used when a protected member (i.e. class member with a name beginning with an underscore) is access outside the class or a descendant of the class where it’s defined.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Access to a protected member %s of a client class</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_PE">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>parse-error</OriginalId>
      <GroupMember>Pylint Checker Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Parse Error</DisplayName>
        <Description>Used when an exception occurred while building the Astroid representation which could be handled by astroid.</Description>
        <HelpText>Used when an exception occurred while building the Astroid representation which could be handled by astroid.</HelpText>
        <WarningText>error while code parsing: %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Blocker</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_POOC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>property-on-old-class</OriginalId>
      <GroupMember>Newstyle Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Property On Old Class</DisplayName>
        <Description>Used when Pylint detect the use of the builtin &quot;property&quot; on an old style class while this is relying on new style classes features. This message can&apos;t be emitted when using Python &gt;= 3.0.</Description>
        <HelpText>&lt;p&gt;Used when Pylint detect the use of the builtin “property” on an old style class while this is relying on new style classes features. This message can’t be emitted when using Python &amp;gt;= 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Use of &quot;property&quot; on an old style class</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_PS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>pointless-statement</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Pointless Statement</DisplayName>
        <Description>Used when a statement doesn&apos;t have (or at least seems to) any effect.</Description>
        <HelpText>&lt;p&gt;Used when a statement doesn’t have (or at least seems to) any effect.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Statement seems to have no effect</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_PSS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>pointless-string-statement</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Pointless String Statement</DisplayName>
        <Description>Used when a string is used as a statement (which of course has no effect). This is a particular case of W0104 with its own message so you can easily disable it if you&apos;re using those strings as documentation, instead of comments.</Description>
        <HelpText>&lt;p&gt;Used when a string is used as a statement (which of course has no effect). This is a particular case of W0104 with its own message so you can easily disable it if you’re using those strings as documentation, instead of comments.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>String statement has no effect</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_PU">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>parameter-unpacking</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Parameter Unpacking</DisplayName>
        <Description>Used when parameter unpacking is specified for a function(Python 3 doesn&apos;t allow it).</Description>
        <HelpText>&lt;p&gt;Used when parameter unpacking is specified for a function(Python 3 doesn’t allow it).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Parameter unpacking specified</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_PrS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>print-statement</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Print Statement</DisplayName>
        <Description>Used when a print statement is used (`print` is a function in Python 3).</Description>
        <HelpText>&lt;p&gt;Used when a print statement is used (&lt;code&gt;print&lt;/code&gt; is a function in Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>print statement used</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_R">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>reimported</OriginalId>
      <GroupMember>Import Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Reimported</DisplayName>
        <Description>Used when a module is reimported multiple times.</Description>
        <HelpText>&lt;p&gt;Used when a module is reimported multiple times.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Reimport %r (imported line %s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_RAFL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>redefined-argument-from-local</OriginalId>
      <GroupMember>Refactoring Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Redefined Argument From Local</DisplayName>
        <Description>Used when a local name is redefining an argument, which might suggest a potential error. This is taken in account only for a handful of name binding operations, such as for iteration, with statement assignment and exception handler assignment.</Description>
        <HelpText>&lt;p&gt;Used when a local name is redefining an argument, which might suggest a potential error. This is taken in account only for a handful of name binding operations, such as for iteration, with statement assignment and exception handler assignment.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Redefining argument with the local name %r</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_RAIG">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>return-arg-in-generator</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Return Arg In Generator</DisplayName>
        <Description>Used when a &quot;return&quot; statement with an argument is found outside in a generator function or method (e.g. with some &quot;yield&quot; statements). This message can&apos;t be emitted when using Python &gt;= 3.3.</Description>
        <HelpText>&lt;p&gt;Used when a “return” statement with an argument is found outside in a generator function or method (e.g. with some “yield” statements). This message can’t be emitted when using Python &amp;gt;= 3.3.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Return with argument inside generator</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_RB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>raw_input-builtin</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Raw_input Builtin</DisplayName>
        <Description>Used when the raw_input built-in function is referenced (missing from Python 3).</Description>
        <HelpText>&lt;p&gt;Used when the raw_input built-in function is referenced (missing from Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>raw_input built-in referenced</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_RBNI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>range-builtin-not-iterating</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Range Builtin Not Iterating</DisplayName>
        <Description>Used when the range built-in is referenced in a non-iterating context (returns an iterator in Python 3).</Description>
        <HelpText>&lt;p&gt;Used when the range built-in is referenced in a non-iterating context (returns an iterator in Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>range built-in referenced when not iterating</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_RBT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>raising-bad-type</OriginalId>
      <GroupMember>Exception Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Raising Bad Type</DisplayName>
        <Description>Used when something which is neither a class, an instance or a string is raised (i.e. a `TypeError` will be raised).</Description>
        <HelpText>&lt;p&gt;Used when something which is neither a class, an instance or a string is raised (i.e. a &lt;code&gt;TypeError&lt;/code&gt; will be raised).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Raising %s while only classes or instances are allowed</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_RBTL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>relative-beyond-top-level</OriginalId>
      <GroupMember>Import Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Relative Beyond Top Level</DisplayName>
        <Description>Used when a relative import tries to access too many levels in the current package.</Description>
        <HelpText>&lt;p&gt;Used when a relative import tries to access too many levels in the current package.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Attempted relative import beyond top-level package</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_RCF">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>raw-checker-failed</OriginalId>
      <GroupMember>Pylint Checker Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Raw Checker Failed</DisplayName>
        <Description>Used to inform that a built-in module has not been checked using the raw checkers.</Description>
        <HelpText>Used to inform that a built-in module has not been checked using the raw checkers.</HelpText>
        <WarningText>Unable to run raw checkers on built-in module %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_RFT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>raising-format-tuple</OriginalId>
      <GroupMember>Exception Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Raising Format Tuple</DisplayName>
        <Description>Used when passing multiple arguments to an exception constructor, the first of them a string literal containing what appears to be placeholders intended for formatting.</Description>
        <HelpText>&lt;p&gt;Used when passing multiple arguments to an exception constructor, the first of them a string literal containing what appears to be placeholders intended for formatting.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Exception arguments suggest string formatting might be intended</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_RI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>relative-import</OriginalId>
      <GroupMember>Import Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Relative Import</DisplayName>
        <Description>Used when an import relative to the package directory is detected. This message can&apos;t be emitted when using Python &gt;= 3.0.</Description>
        <HelpText>&lt;p&gt;Used when an import relative to the package directory is detected. This message can’t be emitted when using Python &amp;gt;= 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Relative import %r, should be %r</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_RIH">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>redefine-in-handler</OriginalId>
      <GroupMember>Variable Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Redefine In Handler</DisplayName>
        <Description>Used when an exception handler assigns the exception to an existing name.</Description>
        <HelpText>&lt;p&gt;Used when an exception handler assigns the exception to an existing name.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Redefining name %r from %s in exception handler</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_RII">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>return-in-init</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Return In Init</DisplayName>
        <Description>Used when the special class method __init__ has an explicit return value.</Description>
        <HelpText>&lt;p&gt;Used when the special class method __init__ has an explicit return value.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Explicit return in __init__</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_RK">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>repeated-keyword</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Repeated Keyword</DisplayName>
        <Description>Emitted when a function call got multiple values for a keyword.</Description>
        <HelpText>&lt;p&gt;Emitted when a function call got multiple values for a keyword.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Got multiple values for keyword argument %r in function call</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_RKA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>redundant-keyword-arg</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Redundant Keyword Arg</DisplayName>
        <Description>Used when a function call would result in assigning multiple values to a function parameter, one value from a positional argument and one from a keyword argument.</Description>
        <HelpText>&lt;p&gt;Used when a function call would result in assigning multiple values to a function parameter, one value from a positional argument and one from a keyword argument.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Argument %r passed by position and keyword in %s call</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_RM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>rdiv-method</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Rdiv Method</DisplayName>
        <Description>Used when a __rdiv__ method is defined. Using `__rtruediv__` and setting__rdiv__ = __rtruediv__ should be preferred.(method is not used by Python 3).</Description>
        <HelpText>&lt;p&gt;Used when a __rdiv__ method is defined. Using &lt;code&gt;__rtruediv__&lt;/code&gt; and setting__rdiv__ = __rtruediv__ should be preferred.(method is not used by Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>__rdiv__ method defined</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_RNE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>raising-non-exception</OriginalId>
      <GroupMember>Exception Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Raising Non Exception</DisplayName>
        <Description>Used when a new style class which doesn&apos;t inherit from BaseException is raised.</Description>
        <HelpText>&lt;p&gt;Used when a new style class which doesn’t inherit from BaseException is raised.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Raising a new style class which doesn&apos;t inherit from BaseException</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ROF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>return-outside-function</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Return Outside Function</DisplayName>
        <Description>Used when a &quot;return&quot; statement is found outside a function or method.</Description>
        <HelpText>&lt;p&gt;Used when a “return” statement is found outside a function or method.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Return outside function</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_RON">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>redefined-outer-name</OriginalId>
      <GroupMember>Variable Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Redefined Outer Name</DisplayName>
        <Description>Used when a variable&apos;s name hides a name defined in the outer scope.</Description>
        <HelpText>&lt;p&gt;Used when a variable’s name hides a name defined in the outer scope.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Redefining name %r from outer scope (line %s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_RS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>raising-string</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Raising String</DisplayName>
        <Description>Used when a string exception is raised. This will not work on Python 3.</Description>
        <HelpText>&lt;p&gt;Used when a string exception is raised. This will not work on Python 3.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Raising a string exception</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_RUA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>redundant-unittest-assert</OriginalId>
      <GroupMember>Stdlib Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Redundant Unittest Assert</DisplayName>
        <Description>The first argument of assertTrue and assertFalse is a condition. If a constant is passed as parameter, that condition will be always true. In this case a warning should be emitted.</Description>
        <HelpText>&lt;p&gt;The first argument of assertTrue and assertFalse is a condition. If a constant is passed as parameter, that condition will be always true. In this case a warning should be emitted.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Redundant use of %s with constant value %r</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ReB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>redefined-builtin</OriginalId>
      <GroupMember>Variable Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Redefined Builtin</DisplayName>
        <Description>Used when a variable or function override a built-in.</Description>
        <HelpText>&lt;p&gt;Used when a variable or function override a built-in.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Redefining built-in %r</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_RedB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>reduce-builtin</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Reduce Builtin</DisplayName>
        <Description>Used when the reduce built-in function is referenced (missing from Python 3).</Description>
        <HelpText>&lt;p&gt;Used when the reduce built-in function is referenced (missing from Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>reduce built-in referenced</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_RelB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>reload-builtin</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Reload Builtin</DisplayName>
        <Description>Used when the reload built-in function is referenced (missing from Python 3). You can use instead imp.reload or importlib.reload.</Description>
        <HelpText>&lt;p&gt;Used when the reload built-in function is referenced (missing from Python 3). You can use instead imp.reload or importlib.reload.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>reload built-in referenced</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_RoB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>round-builtin</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Round Builtin</DisplayName>
        <Description>Used when the round built-in is referenced (backwards-incompatible semantics in Python 3).</Description>
        <HelpText>&lt;p&gt;Used when the round built-in is referenced (backwards-incompatible semantics in Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>round built-in referenced</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_SB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>standarderror-builtin</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Standarderror Builtin</DisplayName>
        <Description>Used when the StandardError built-in function is referenced (missing from Python 3).</Description>
        <HelpText>&lt;p&gt;Used when the StandardError built-in function is referenced (missing from Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>StandardError built-in referenced</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_SBE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>simplify-boolean-expression</OriginalId>
      <GroupMember>Refactoring Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Simplify Boolean Expression</DisplayName>
        <Description>Emitted when redundant pre-python 2.5 ternary syntax is used.</Description>
        <HelpText>&lt;p&gt;Emitted when redundant pre-python 2.5 ternary syntax is used.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Boolean expression may be simplified to %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_SC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>singleton-comparison</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Singleton Comparison</DisplayName>
        <Description>Used when an expression is compared to singleton values like True, False or None.</Description>
        <HelpText>&lt;p&gt;Used when an expression is compared to singleton values like True, False or None.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Comparison to %s should be %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_SCE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>shallow-copy-environ</OriginalId>
      <GroupMember>Stdlib Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Shallow Copy Environ</DisplayName>
        <Description>os.environ is not a dict object but proxy object, so shallow copy has still effects on original object. See https://bugs.python.org/issue15373 for reference.</Description>
        <HelpText>&lt;p&gt;os.environ is not a dict object but proxy object, so shallow copy has still effects on original object. See &lt;a href=&quot;https://bugs.python.org/issue15373&quot; class=&quot;uri&quot;&gt;https://bugs.python.org/issue15373&lt;/a&gt; for reference.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Using copy.copy(os.environ). Use os.environ.copy() instead. </WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_SD">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>signature-differs</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Signature Differs</DisplayName>
        <Description>Used when a method signature is different than in the implemented interface or in an overridden method.</Description>
        <HelpText>&lt;p&gt;Used when a method signature is different than in the implemented interface or in an overridden method.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Signature differs from %s %r method</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_SE">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>syntax-error</OriginalId>
      <GroupMember>Pylint Checker Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Syntax Error</DisplayName>
        <Description>Used when a syntax error is raised for a module.</Description>
        <HelpText>Used when a syntax error is raised for a module.</HelpText>
        <WarningText></WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_SINC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>super-init-not-called</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Super Init Not Called</DisplayName>
        <Description>Used when an ancestor class method has an __init__ method which is not called by a derived class.</Description>
        <HelpText>&lt;p&gt;Used when an ancestor class method has an __init__ method which is not called by a derived class.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>__init__ method from base class %r is not called</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_SIR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>stop-iteration-return</OriginalId>
      <GroupMember>Refactoring Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Stop Iteration Return</DisplayName>
        <Description>According to PEP479, the raise of StopIteration to end the loop of a generator may lead to hard to find bugs. This PEP specify that raise StopIteration has to be replaced by a simple return statement. This message can&apos;t be emitted when using Python &lt; 3.0.</Description>
        <HelpText>&lt;p&gt;According to PEP479, the raise of StopIteration to end the loop of a generator may lead to hard to find bugs. This PEP specify that raise StopIteration has to be replaced by a simple return statement. This message can’t be emitted when using Python &amp;lt; 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Do not raise StopIteration in generator, use return statement instead</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_SIS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>simplifiable-if-statement</OriginalId>
      <GroupMember>Refactoring Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Simplifiable If Statement</DisplayName>
        <Description>Used when an if statement can be replaced with &apos;bool(test)&apos;.</Description>
        <HelpText>&lt;p&gt;Used when an if statement can be replaced with ‘bool(test)’.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>The if statement can be replaced with %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_SM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>setslice-method</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Setslice Method</DisplayName>
        <Description>Used when a __setslice__ method is defined (method is not used by Python 3).</Description>
        <HelpText>&lt;p&gt;Used when a __setslice__ method is defined (method is not used by Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>__setslice__ method defined</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_SMI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>sys-max-int</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Sys Max Int</DisplayName>
        <Description>Used when accessing sys.maxint. Use sys.maxsize instead.</Description>
        <HelpText>&lt;p&gt;Used when accessing sys.maxint. Use sys.maxsize instead.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>sys.maxint removed in Python 3</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_SNAT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>star-needs-assignment-target</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Star Needs Assignment Target</DisplayName>
        <Description>Emitted when a star expression is not used in an assignment target. This message can&apos;t be emitted when using Python &lt; 3.0.</Description>
        <HelpText>&lt;p&gt;Emitted when a star expression is not used in an assignment target. This message can’t be emitted when using Python &amp;lt; 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Can use starred expression only in assignment target</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_SOOC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>slots-on-old-class</OriginalId>
      <GroupMember>Newstyle Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Slots On Old Class</DisplayName>
        <Description>Used when an old style class uses the __slots__ attribute. This message can&apos;t be emitted when using Python &gt;= 3.0.</Description>
        <HelpText>&lt;p&gt;Used when an old style class uses the __slots__ attribute. This message can’t be emitted when using Python &amp;gt;= 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Use of __slots__ on an old style class</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_SP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>superfluous-parens</OriginalId>
      <GroupMember>Format Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Superfluous Parens</DisplayName>
        <Description>Used when a single item in parentheses follows an if, for, or other keyword.</Description>
        <HelpText>&lt;p&gt;Used when a single item in parentheses follows an if, for, or other keyword.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Unnecessary parens after %r keyword</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_SSUFS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>single-string-used-for-slots</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Single String Used For Slots</DisplayName>
        <Description>Used when a class __slots__ is a simple string, rather than an iterable.</Description>
        <HelpText>&lt;p&gt;Used when a class __slots__ is a simple string, rather than an iterable.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Class __slots__ should be a non-string iterable</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_SuM">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>suppressed-message</OriginalId>
      <GroupMember>Pylint Checker Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Suppressed Message</DisplayName>
        <Description>A message was triggered on a line, but suppressed explicitly by a disable= comment in the file. This message is not generated for messages that are ignored due to configuration settings.</Description>
        <HelpText>A message was triggered on a line, but suppressed explicitly by a disable= comment in the file. This message is not generated for messages that are ignored due to configuration settings.</HelpText>
        <WarningText>Suppressed %s (from line %d)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_SuOOC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>super-on-old-class</OriginalId>
      <GroupMember>Newstyle Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Super On Old Class</DisplayName>
        <Description>Used when an old style class uses the super builtin. This message can&apos;t be emitted when using Python &gt;= 3.0.</Description>
        <HelpText>&lt;p&gt;Used when an old style class uses the super builtin. This message can’t be emitted when using Python &amp;gt;= 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Use of super on an old style class</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_TCT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>trailing-comma-tuple</OriginalId>
      <GroupMember>Refactoring Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Trailing Comma Tuple</DisplayName>
        <Description>In Python, a tuple is actually created by the comma symbol, not by the parentheses. Unfortunately, one can actually create a tuple by misplacing a trailing comma, which can lead to potential weird bugs in your code. You should always use parentheses explicitly for creating a tuple. This message can&apos;t be emitted when using Python &lt; 3.0.</Description>
        <HelpText>&lt;p&gt;In Python, a tuple is actually created by the comma symbol, not by the parentheses. Unfortunately, one can actually create a tuple by misplacing a trailing comma, which can lead to potential weird bugs in your code. You should always use parentheses explicitly for creating a tuple. This message can’t be emitted when using Python &amp;lt; 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Disallow trailing comma tuple</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_TFFA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>too-few-format-args</OriginalId>
      <GroupMember>String Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Too Few Format Args</DisplayName>
        <Description>Used when a format string that uses unnamed conversion specifiers is given too few arguments.</Description>
        <HelpText>&lt;p&gt;Used when a format string that uses unnamed conversion specifiers is given too few arguments.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Not enough arguments for format string</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_TFPM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>too-few-public-methods</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Too Few Public Methods</DisplayName>
        <Description>Used when class has too few public methods, so be sure it&apos;s really worth it.</Description>
        <HelpText>&lt;p&gt;Used when class has too few public methods, so be sure it’s really worth it.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Too few public methods (%s/%s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_TFS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>truncated-format-string</OriginalId>
      <GroupMember>String Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Truncated Format String</DisplayName>
        <Description>Used when a format string terminates before the end of a conversion specifier.</Description>
        <HelpText>&lt;p&gt;Used when a format string terminates before the end of a conversion specifier.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Format string ends in middle of conversion specifier</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_TMA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>too-many-ancestors</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Too Many Ancestors</DisplayName>
        <Description>Used when class has too many parent classes, try to reduce this to get a simpler (and so easier to use) class.</Description>
        <HelpText>&lt;p&gt;Used when class has too many parent classes, try to reduce this to get a simpler (and so easier to use) class.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Too many ancestors (%s/%s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_TMB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>too-many-branches</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Too Many Branches</DisplayName>
        <Description>Used when a function or method has too many branches, making it hard to follow.</Description>
        <HelpText>&lt;p&gt;Used when a function or method has too many branches, making it hard to follow.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Too many branches (%s/%s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_TMBE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>too-many-boolean-expressions</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Too Many Boolean Expressions</DisplayName>
        <Description>Used when a if statement contains too many boolean expressions.</Description>
        <HelpText>&lt;p&gt;Used when a if statement contains too many boolean expressions.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Too many boolean expressions in if statement (%s/%s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_TMFA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>too-many-format-args</OriginalId>
      <GroupMember>String Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Too Many Format Args</DisplayName>
        <Description>Used when a format string that uses unnamed conversion specifiers is given too many arguments.</Description>
        <HelpText>&lt;p&gt;Used when a format string that uses unnamed conversion specifiers is given too many arguments.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Too many arguments for format string</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_TMIA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>too-many-instance-attributes</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Too Many Instance Attributes</DisplayName>
        <Description>Used when class has too many instance attributes, try to reduce this to get a simpler (and so easier to use) class.</Description>
        <HelpText>&lt;p&gt;Used when class has too many instance attributes, try to reduce this to get a simpler (and so easier to use) class.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Too many instance attributes (%s/%s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_TML">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>too-many-lines</OriginalId>
      <GroupMember>Format Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Too Many Lines</DisplayName>
        <Description>Used when a module has too much lines, reducing its readability.</Description>
        <HelpText>&lt;p&gt;Used when a module has too much lines, reducing its readability.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Too many lines in module (%s/%s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_TMNB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>too-many-nested-blocks</OriginalId>
      <GroupMember>Refactoring Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Too Many Nested Blocks</DisplayName>
        <Description>Used when a function or a method has too many nested blocks. This makes the code less understandable and maintainable.</Description>
        <HelpText>&lt;p&gt;Used when a function or a method has too many nested blocks. This makes the code less understandable and maintainable.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Too many nested blocks (%s/%s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_TMPM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>too-many-public-methods</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Too Many Public Methods</DisplayName>
        <Description>Used when class has too many public methods, try to reduce this to get a simpler (and so easier to use) class.</Description>
        <HelpText>&lt;p&gt;Used when class has too many public methods, try to reduce this to get a simpler (and so easier to use) class.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Too many public methods (%s/%s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_TMRS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>too-many-return-statements</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Too Many Return Statements</DisplayName>
        <Description>Used when a function or method has too many return statement, making it hard to follow.</Description>
        <HelpText>&lt;p&gt;Used when a function or method has too many return statement, making it hard to follow.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Too many return statements (%s/%s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_TMS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>too-many-statements</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Too Many Statements</DisplayName>
        <Description>Used when a function or method has too many statements. You should then split it in smaller functions / methods.</Description>
        <HelpText>&lt;p&gt;Used when a function or method has too many statements. You should then split it in smaller functions / methods.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Too many statements (%s/%s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_TMSE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>too-many-star-expressions</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Too Many Star Expressions</DisplayName>
        <Description>Emitted when there are more than one starred expressions (`*x`) in an assignment. This is a SyntaxError. This message can&apos;t be emitted when using Python &lt; 3.0.</Description>
        <HelpText>&lt;p&gt;Emitted when there are more than one starred expressions (&lt;code&gt;*x&lt;/code&gt;) in an assignment. This is a SyntaxError. This message can’t be emitted when using Python &amp;lt; 3.0.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>More than one starred expression in assignment</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_TN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>trailing-newlines</OriginalId>
      <GroupMember>Format Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Trailing Newlines</DisplayName>
        <Description>Used when there are trailing blank lines in a file.</Description>
        <HelpText>&lt;p&gt;Used when there are trailing blank lines in a file.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Trailing newlines</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_TW">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>trailing-whitespace</OriginalId>
      <GroupMember>Format Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Trailing Whitespace</DisplayName>
        <Description>Used when there is whitespace between the end of a line and the newline.</Description>
        <HelpText>&lt;p&gt;Used when there is whitespace between the end of a line and the newline.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Trailing whitespace</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ToMA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>too-many-arguments</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Too Many Arguments</DisplayName>
        <Description>Used when a function or method takes too many arguments.</Description>
        <HelpText>&lt;p&gt;Used when a function or method takes too many arguments.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Too many arguments (%s/%s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ToMFA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>too-many-function-args</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Too Many Function Args</DisplayName>
        <Description>Used when a function call passes too many positional arguments.</Description>
        <HelpText>&lt;p&gt;Used when a function call passes too many positional arguments.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Too many positional arguments for %s call</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ToML">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>too-many-locals</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Too Many Locals</DisplayName>
        <Description>Used when a function or method has too many local variables.</Description>
        <HelpText>&lt;p&gt;Used when a function or method has too many local variables.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Too many local variables (%s/%s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_U">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unreachable</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unreachable</DisplayName>
        <Description>Used when there is some code behind a &quot;return&quot; or &quot;raise&quot; statement, which will never be accessed.</Description>
        <HelpText>&lt;p&gt;Used when there is some code behind a “return” or “raise” statement, which will never be accessed.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Unreachable code</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unused-argument</OriginalId>
      <GroupMember>Variable Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unused Argument</DisplayName>
        <Description>Used when a function or method argument is not used.</Description>
        <HelpText>&lt;p&gt;Used when a function or method argument is not used.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Unused argument %r</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UAO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unsupported-assignment-operation</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unsupported Assignment Operation</DisplayName>
        <Description>Emitted when an object does not support item assignment (i.e. doesn&apos;t define __setitem__ method).</Description>
        <HelpText>&lt;p&gt;Emitted when an object does not support item assignment (i.e. doesn’t define __setitem__ method).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>%r does not support item assignment</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UAV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>undefined-all-variable</OriginalId>
      <GroupMember>Variable Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Undefined All Variable</DisplayName>
        <Description>Used when an undefined variable name is referenced in __all__.</Description>
        <HelpText>&lt;p&gt;Used when an undefined variable name is referenced in __all__.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Undefined variable name %r in __all__</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unicode-builtin</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unicode Builtin</DisplayName>
        <Description>Used when the unicode built-in function is referenced (missing from Python 3).</Description>
        <HelpText>&lt;p&gt;Used when the unicode built-in function is referenced (missing from Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>unicode built-in referenced</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UBA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>used-before-assignment</OriginalId>
      <GroupMember>Variable Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Used Before Assignment</DisplayName>
        <Description>Used when a local variable is accessed before it&apos;s assignment.</Description>
        <HelpText>&lt;p&gt;Used when a local variable is accessed before it’s assignment.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Using variable %r before assignment</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UBO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unsupported-binary-operation</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unsupported Binary Operation</DisplayName>
        <Description>Emitted when a binary arithmetic operation between two operands is not supported.</Description>
        <HelpText>&lt;p&gt;Emitted when a binary arithmetic operation between two operands is not supported.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText></WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UCA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>using-cmp-argument</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Using Cmp Argument</DisplayName>
        <Description>Using the cmp argument for list.sort or the sorted builtin should be avoided, since it was removed in Python 3. Using either `key` or `functools.cmp_to_key` should be preferred.</Description>
        <HelpText>&lt;p&gt;Using the cmp argument for list.sort or the sorted builtin should be avoided, since it was removed in Python 3. Using either &lt;code&gt;key&lt;/code&gt; or &lt;code&gt;functools.cmp_to_key&lt;/code&gt; should be preferred.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Using the cmp argument for list.sort / sorted</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UCT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>using-constant-test</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Using Constant Test</DisplayName>
        <Description>Emitted when a conditional statement (If or ternary if) uses a constant value for its test. This might not be what the user intended to do.</Description>
        <HelpText>&lt;p&gt;Emitted when a conditional statement (If or ternary if) uses a constant value for its test. This might not be what the user intended to do.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Using a conditional statement with a constant value</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UDO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unsupported-delete-operation</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unsupported Delete Operation</DisplayName>
        <Description>Emitted when an object does not support item deletion (i.e. doesn&apos;t define __delitem__ method).</Description>
        <HelpText>&lt;p&gt;Emitted when an object does not support item deletion (i.e. doesn’t define __delitem__ method).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>%r does not support item deletion</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UEOL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>useless-else-on-loop</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Useless Else On Loop</DisplayName>
        <Description>Loops should only have an else clause if they can exit early with a break statement, otherwise the statements under else should be on the same scope as the loop itself.</Description>
        <HelpText>&lt;p&gt;Loops should only have an else clause if they can exit early with a break statement, otherwise the statements under else should be on the same scope as the loop itself.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Else clause on loop without a break statement</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UFSA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unused-format-string-argument</OriginalId>
      <GroupMember>String Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unused Format String Argument</DisplayName>
        <Description>Used when a PEP 3101 format string that uses named fields is used with an argument that is not required by the format string. This message can&apos;t be emitted when using Python &lt; 2.7.</Description>
        <HelpText>&lt;p&gt;Used when a PEP 3101 format string that uses named fields is used with an argument that is not required by the format string. This message can’t be emitted when using Python &amp;lt; 2.7.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Unused format argument %r</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UFSK">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unused-format-string-key</OriginalId>
      <GroupMember>String Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unused Format String Key</DisplayName>
        <Description>Used when a format string that uses named conversion specifiers is used with a dictionary that contains keys not required by the format string.</Description>
        <HelpText>&lt;p&gt;Used when a format string that uses named conversion specifiers is used with a dictionary that contains keys not required by the format string.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Unused key %r in format string dictionary</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UIE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unpacking-in-except</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unpacking In Except</DisplayName>
        <Description>Python3 will not allow implicit unpacking of exceptions in except clauses. See http://www.python.org/dev/peps/pep-3110/.</Description>
        <HelpText>&lt;p&gt;Python3 will not allow implicit unpacking of exceptions in except clauses. See &lt;a href=&quot;http://www.python.org/dev/peps/pep-3110/&quot; class=&quot;uri&quot;&gt;http://www.python.org/dev/peps/pep-3110/&lt;/a&gt;.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Implicit unpacking of exceptions is not supported in Python 3</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UIO">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unrecognized-inline-option</OriginalId>
      <GroupMember>Pylint Checker Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unrecognized Inline Option</DisplayName>
        <Description>Used when an unknown inline option is encountered.</Description>
        <HelpText>Used when an unknown inline option is encountered.</HelpText>
        <WarningText>Unrecognized file option %r</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UKA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unexpected-keyword-arg</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unexpected Keyword Arg</DisplayName>
        <Description>Used when a function call passes a keyword argument that doesn&apos;t correspond to one of the function&apos;s parameter names.</Description>
        <HelpText>&lt;p&gt;Used when a function call passes a keyword argument that doesn’t correspond to one of the function’s parameter names.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Unexpected keyword argument %r in %s call</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unnecessary-lambda</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unnecessary Lambda</DisplayName>
        <Description>Used when the body of a lambda expression is a function call on the same argument list as the lambda itself; such lambda expressions are in all but a few cases replaceable with the function being called in the body of the lambda.</Description>
        <HelpText>&lt;p&gt;Used when the body of a lambda expression is a function call on the same argument list as the lambda itself; such lambda expressions are in all but a few cases replaceable with the function being called in the body of the lambda.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Lambda may not be necessary</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ULEF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unexpected-line-ending-format</OriginalId>
      <GroupMember>Format Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unexpected Line Ending Format</DisplayName>
        <Description>Used when there is different newline than expected.</Description>
        <HelpText>&lt;p&gt;Used when there is different newline than expected.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Unexpected line ending format. There is &apos;%s&apos; while it should be &apos;%s&apos;.</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ULV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>undefined-loop-variable</OriginalId>
      <GroupMember>Variable Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Undefined Loop Variable</DisplayName>
        <Description>Used when an loop variable (i.e. defined by a for loop or a list comprehension or a generator expression) is used outside the loop.</Description>
        <HelpText>&lt;p&gt;Used when an loop variable (i.e. defined by a for loop or a list comprehension or a generator expression) is used outside the loop.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Using possibly undefined loop variable %r</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UMT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unsupported-membership-test</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unsupported Membership Test</DisplayName>
        <Description>Emitted when an instance in membership test expression doesn&apos;t implement membership protocol (__contains__/__iter__/__getitem__).</Description>
        <HelpText>&lt;p&gt;Emitted when an instance in membership test expression doesn’t implement membership protocol (__contains__/__iter__/__getitem__).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Value &apos;%s&apos; doesn&apos;t support membership test</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unneeded-not</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unneeded Not</DisplayName>
        <Description>Used when a boolean expression contains an unneeded negation.</Description>
        <HelpText>&lt;p&gt;Used when a boolean expression contains an unneeded negation.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Consider changing &quot;%s&quot; to &quot;%s&quot;</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UNS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unpacking-non-sequence</OriginalId>
      <GroupMember>Variable Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unpacking Non Sequence</DisplayName>
        <Description>Used when something which is not a sequence is used in an unpack assignment.</Description>
        <HelpText>&lt;p&gt;Used when something which is not a sequence is used in an unpack assignment.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Attempting to unpack a non-sequence%s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unsubscriptable-object</OriginalId>
      <GroupMember>Typecheck Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unsubscriptable Object</DisplayName>
        <Description>Emitted when a subscripted value doesn&apos;t support subscription(i.e. doesn&apos;t define __getitem__ method).</Description>
        <HelpText>&lt;p&gt;Emitted when a subscripted value doesn’t support subscription(i.e. doesn’t define __getitem__ method).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Value &apos;%s&apos; is unsubscriptable</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unnecessary-pass</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unnecessary Pass</DisplayName>
        <Description>Used when a &quot;pass&quot; statement that can be avoided is encountered.</Description>
        <HelpText>&lt;p&gt;Used when a “pass” statement that can be avoided is encountered.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Unnecessary pass statement</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UPGD">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>used-prior-global-declaration</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Used Prior Global Declaration</DisplayName>
        <Description>Emitted when a name is used prior a global declaration, which results in an error since Python 3.6. This message can&apos;t be emitted when using Python &lt; 3.6.</Description>
        <HelpText>&lt;p&gt;Emitted when a name is used prior a global declaration, which results in an error since Python 3.6. This message can’t be emitted when using Python &amp;lt; 3.6.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Name %r is used prior to global declaration</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_US">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unnecessary-semicolon</OriginalId>
      <GroupMember>Format Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unnecessary Semicolon</DisplayName>
        <Description>Used when a statement is ended by a semi-colon (&quot;;&quot;), which isn&apos;t necessary (that&apos;s python, not C ;).</Description>
        <HelpText>&lt;p&gt;Used when a statement is ended by a semi-colon (“;”), which isn’t necessary (that’s python, not C ;).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Unnecessary semicolon</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_USD">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>useless-super-delegation</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Useless Super Delegation</DisplayName>
        <Description>Used whenever we can detect that an overridden method is useless, relying on super() delegation to do the same thing as another method from the MRO.</Description>
        <HelpText>&lt;p&gt;Used whenever we can detect that an overridden method is useless, relying on super() delegation to do the same thing as another method from the MRO.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Useless super delegation in method %r</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_USMS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unexpected-special-method-signature</OriginalId>
      <GroupMember>Class Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unexpected Special Method Signature</DisplayName>
        <Description>Emitted when a special method was defined with an invalid number of parameters. If it has too few or too many, it might not work at all.</Description>
        <HelpText>&lt;p&gt;Emitted when a special method was defined with an invalid number of parameters. If it has too few or too many, it might not work at all.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>The special method %r expects %s param(s), %d %s given</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unidiomatic-typecheck</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unidiomatic Typecheck</DisplayName>
        <Description>The idiomatic way to perform an explicit typecheck in Python is to use isinstance(x, Y) rather than type(x) == Y, type(x) is Y. Though there are unusual situations where these give different results.</Description>
        <HelpText>&lt;p&gt;The idiomatic way to perform an explicit typecheck in Python is to use isinstance(x, Y) rather than type(x) == Y, type(x) is Y. Though there are unusual situations where these give different results.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Using type() instead of isinstance() for a typecheck.</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UTU">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unbalanced-tuple-unpacking</OriginalId>
      <GroupMember>Variable Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unbalanced Tuple Unpacking</DisplayName>
        <Description>Used when there is an unbalanced tuple unpacking in assignment.</Description>
        <HelpText>&lt;p&gt;Used when there is an unbalanced tuple unpacking in assignment.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Possible unbalanced tuple unpacking with sequence%s: left side has %d label(s), right side has %d value(s)</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>undefined-variable</OriginalId>
      <GroupMember>Variable Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Undefined Variable</DisplayName>
        <Description>Used when an undefined variable is accessed.</Description>
        <HelpText>&lt;p&gt;Used when an undefined variable is accessed.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Undefined variable %r</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UWI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unused-wildcard-import</OriginalId>
      <GroupMember>Variable Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unused Wildcard Import</DisplayName>
        <Description>Used when an imported module or variable is not used from a `&apos;from X import *&apos;` style import.</Description>
        <HelpText>&lt;p&gt;Used when an imported module or variable is not used from a &lt;code&gt;&apos;from X import *&apos;&lt;/code&gt; style import.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Unused import %s from wildcard import</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UnB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unichr-builtin</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unichr Builtin</DisplayName>
        <Description>Used when the unichr built-in is referenced (Use chr in Python 3).</Description>
        <HelpText>&lt;p&gt;Used when the unichr built-in is referenced (Use chr in Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>unichr built-in referenced</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UnI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unused-import</OriginalId>
      <GroupMember>Variable Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unused Import</DisplayName>
        <Description>Used when an imported module or variable is not used.</Description>
        <HelpText>&lt;p&gt;Used when an imported module or variable is not used.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Unused %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UnV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>unused-variable</OriginalId>
      <GroupMember>Variable Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unused Variable</DisplayName>
        <Description>Used when a variable is defined but not used.</Description>
        <HelpText>&lt;p&gt;Used when a variable is defined but not used.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Unused variable %r</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UngI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>ungrouped-imports</OriginalId>
      <GroupMember>Import Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Ungrouped Imports</DisplayName>
        <Description>Used when imports are not grouped by packages.</Description>
        <HelpText>&lt;p&gt;Used when imports are not grouped by packages.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Imports from package %s are not grouped</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_UsS">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>useless-suppression</OriginalId>
      <GroupMember>Pylint Checker Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Useless Suppression</DisplayName>
        <Description>Reported when a message is explicitly disabled for a line or a block of code, but never triggered.</Description>
        <HelpText>Reported when a message is explicitly disabled for a line or a block of code, but never triggered.</HelpText>
        <WarningText>Useless suppression of %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_WI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>wildcard-import</OriginalId>
      <GroupMember>Import Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Wildcard Import</DisplayName>
        <Description>Used when `from module import *` is detected.</Description>
        <HelpText>&lt;p&gt;Used when &lt;code&gt;from module import *&lt;/code&gt; is detected.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Wildcard import %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_WIO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>wrong-import-order</OriginalId>
      <GroupMember>Import Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Wrong Import Order</DisplayName>
        <Description>Used when PEP8 import order is not respected (standard imports first, then third-party libraries, then local imports).</Description>
        <HelpText>&lt;p&gt;Used when PEP8 import order is not respected (standard imports first, then third-party libraries, then local imports).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>%s should be placed before %s</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_WIP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>wrong-import-position</OriginalId>
      <GroupMember>Import Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Wrong Import Position</DisplayName>
        <Description>Used when code and imports are mixed.</Description>
        <HelpText>&lt;p&gt;Used when code and imports are mixed.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Import &quot;%s&quot; should be placed at the top of the module</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_WSIC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>wrong-spelling-in-comment</OriginalId>
      <GroupMember>Spelling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Wrong Spelling In Comment</DisplayName>
        <Description>Used when a word in comment is not spelled correctly.</Description>
        <HelpText>&lt;p&gt;Used when a word in comment is not spelled correctly.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Wrong spelling of a word &apos;%s&apos; in a comment:</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_WSID">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>wrong-spelling-in-docstring</OriginalId>
      <GroupMember>Spelling Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Wrong Spelling In Docstring</DisplayName>
        <Description>Used when a word in docstring is not spelled correctly.</Description>
        <HelpText>&lt;p&gt;Used when a word in docstring is not spelled correctly.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Wrong spelling of a word &apos;%s&apos; in a docstring:</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_XA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>xreadlines-attribute</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Xreadlines Attribute</DisplayName>
        <Description>Used when accessing the xreadlines() function on a file stream, removed in Python 3.</Description>
        <HelpText>&lt;p&gt;Used when accessing the xreadlines() function on a file stream, removed in Python 3.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Accessing a removed xreadlines attribute</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_XB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>xrange-builtin</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Xrange Builtin</DisplayName>
        <Description>Used when the xrange built-in function is referenced (missing from Python 3).</Description>
        <HelpText>&lt;p&gt;Used when the xrange built-in function is referenced (missing from Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>xrange built-in referenced</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_YIAF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>yield-inside-async-function</OriginalId>
      <GroupMember>Async Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Yield Inside Async Function</DisplayName>
        <Description>Used when an `yield` or `yield from` statement is found inside an async function. This message can&apos;t be emitted when using Python &lt; 3.5.</Description>
        <HelpText>&lt;p&gt;Used when an &lt;code&gt;yield&lt;/code&gt; or &lt;code&gt;yield from&lt;/code&gt; statement is found inside an async function. This message can’t be emitted when using Python &amp;lt; 3.5.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Yield inside async function</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_YOF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>yield-outside-function</OriginalId>
      <GroupMember>Basic Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Yield Outside Function</DisplayName>
        <Description>Used when a &quot;yield&quot; statement is found outside a function or method.</Description>
        <HelpText>&lt;p&gt;Used when a “yield” statement is found outside a function or method.&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>Yield outside function</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PYLINT_ZBNI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>false</Group>
      <OriginalId>zip-builtin-not-iterating</OriginalId>
      <GroupMember>Python3 Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Zip Builtin Not Iterating</DisplayName>
        <Description>Used when the zip built-in is referenced in a non-iterating context (returns an iterator in Python 3).</Description>
        <HelpText>&lt;p&gt;Used when the zip built-in is referenced in a non-iterating context (returns an iterator in Python 3).&lt;/p&gt;&#x0A;</HelpText>
        <WarningText>zip built-in referenced when not iterating</WarningText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Pylint Checker Rules">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>master</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Pylint Checker Rules</DisplayName>
        <Description>Pylint Checker Rules</Description>
        <HelpText>Pylint Checker Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Python3 Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>python3</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Python3 Rules</DisplayName>
        <Description>Python3 Rules</Description>
        <HelpText>Python3 Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Refactoring Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>refactoring</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Refactoring Rules</DisplayName>
        <Description>Refactoring Rules</Description>
        <HelpText>Refactoring Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Similarity Rules">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>similarities</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Similarity Rules</DisplayName>
        <Description>Similarity Rules</Description>
        <HelpText>Similarity Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Spelling Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>spelling</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Spelling Rules</DisplayName>
        <Description>Spelling Rules</Description>
        <HelpText>Spelling Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Stdlib Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>stdlib</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Stdlib Rules</DisplayName>
        <Description>Stdlib Rules</Description>
        <HelpText>Stdlib Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "String Constant Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>string_constant</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>String Constant Rules</DisplayName>
        <Description>String Constant Rules</Description>
        <HelpText>String Constant Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "String Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>string</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>String Rules</DisplayName>
        <Description>String Rules</Description>
        <HelpText>String Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Typecheck Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>typecheck</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Typecheck Rules</DisplayName>
        <Description>Typecheck Rules</Description>
        <HelpText>Typecheck Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Variable Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>variables</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Variable Rules</DisplayName>
        <Description>Variable Rules</Description>
        <HelpText>Variable Rules</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
</Rul>
